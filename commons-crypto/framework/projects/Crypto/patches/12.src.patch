diff --git a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipher.java b/src/main/java/org/apache/commons/crypto/cipher/Cipher.java
similarity index 97%
rename from src/main/java/org/apache/commons/crypto/cipher/CryptoCipher.java
rename to src/main/java/org/apache/commons/crypto/cipher/Cipher.java
index a47de36..3cbbe3a 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipher.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/Cipher.java
@@ -32,17 +32,17 @@ import javax.crypto.ShortBufferException;
 /**
  * The interface of cryptographic cipher for encryption and decryption.
  */
-public interface CryptoCipher extends Closeable {
+public interface Cipher extends Closeable {
 
   /**
    * A constant representing encrypt mode.  The mode constant to be used
-   * when calling init method of the CryptoCipher.
+   * when calling init method of the Cipher.
    */
   int ENCRYPT_MODE = javax.crypto.Cipher.ENCRYPT_MODE;
 
   /**
    * A constant representing decrypt mode.  The mode constant to be used 
-   * when calling init method of the CryptoCipher.
+   * when calling init method of the Cipher.
    */
   int DECRYPT_MODE = javax.crypto.Cipher.DECRYPT_MODE;
 
diff --git a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java b/src/main/java/org/apache/commons/crypto/cipher/CipherFactory.java
similarity index 70%
rename from src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
rename to src/main/java/org/apache/commons/crypto/cipher/CipherFactory.java
index 20be0cb..fdaf64c 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/CipherFactory.java
@@ -30,12 +30,12 @@ import org.slf4j.LoggerFactory;
 /**
  * This is the factory class used for creating cipher class
  */
-public class CryptoCipherFactory {
+public class CipherFactory {
 
   /** LOG instance for {@CipherFactory} */
-  public final static Logger LOG = LoggerFactory.getLogger(CryptoCipherFactory.class);
+  public final static Logger LOG = LoggerFactory.getLogger(CipherFactory.class);
 
-  private CryptoCipherFactory() {}
+  private CipherFactory() {}
 
   /**
    * Gets a cipher instance for specified algorithm/mode/padding.
@@ -44,15 +44,15 @@ public class CryptoCipherFactory {
    *          the configuration properties
    * @param transformation
    *          algorithm/mode/padding
-   * @return CryptoCipher the cipher. Null value will be returned if no
+   * @return Cipher the cipher. Null value will be returned if no
    *         cipher classes with transformation configured.
    */
-  public static CryptoCipher getInstance(CipherTransformation transformation,
-                                         Properties props) throws GeneralSecurityException {
-    List<Class<? extends CryptoCipher>> klasses = getCipherClasses(props);
-    CryptoCipher cipher = null;
+  public static Cipher getInstance(CipherTransformation transformation,
+      Properties props) throws GeneralSecurityException {
+    List<Class<? extends Cipher>> klasses = getCipherClasses(props);
+    Cipher cipher = null;
     if (klasses != null) {
-      for (Class<? extends CryptoCipher> klass : klasses) {
+      for (Class<? extends Cipher> klass : klasses) {
         try {
           cipher = ReflectionUtils.newInstance(klass, props, transformation);
           if (cipher != null) {
@@ -61,7 +61,7 @@ public class CryptoCipherFactory {
             break;
           }
         } catch (Exception e) {
-          LOG.error("CryptoCipher {} is not available or transformation {} is not " +
+          LOG.error("Cipher {} is not available or transformation {} is not " +
             "supported.", klass.getName(), transformation.getName());
         }
       }
@@ -74,28 +74,28 @@ public class CryptoCipherFactory {
    * Gets a cipher for algorithm/mode/padding in config value
    * commons.crypto.cipher.transformation
    *
-   * @return CryptoCipher the cipher object Null value will be returned if no
+   * @return Cipher the cipher object Null value will be returned if no
    *         cipher classes with transformation configured.
    */
-  public static CryptoCipher getInstance(CipherTransformation transformation)
+  public static Cipher getInstance(CipherTransformation transformation)
       throws GeneralSecurityException {
     return getInstance(transformation, new Properties());
   }
 
   // Return OpenSSLCipher if Properties is null or empty by default
-  private static List<Class<? extends CryptoCipher>> getCipherClasses(Properties props) {
-    List<Class<? extends CryptoCipher>> result = new ArrayList<Class<? extends
-            CryptoCipher>>();
+  private static List<Class<? extends Cipher>> getCipherClasses(Properties props) {
+    List<Class<? extends Cipher>> result = new ArrayList<Class<? extends
+        Cipher>>();
     String cipherClassString = Utils.getCipherClassString(props);
 
     for (String c : Utils.splitClassNames(cipherClassString, ",")) {
       try {
         Class<?> cls = ReflectionUtils.getClassByName(c);
-        result.add(cls.asSubclass(CryptoCipher.class));
+        result.add(cls.asSubclass(Cipher.class));
       } catch (ClassCastException e) {
-        LOG.error("Class {} is not a CryptoCipher.", c);
+        LOG.error("Class {} is not a Cipher.", c);
       } catch (ClassNotFoundException e) {
-        LOG.error("CryptoCipher {} not found.", c);
+        LOG.error("Cipher {} not found.", c);
       }
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java b/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java
index 57750c2..873d092 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java
@@ -32,15 +32,15 @@ import javax.crypto.ShortBufferException;
 import org.apache.commons.crypto.utils.Utils;
 
 /**
- * Implements the {@link org.apache.commons.crypto.cipher.CryptoCipher} using JCE provider.
+ * Implements the {@link org.apache.commons.crypto.cipher.Cipher} using JCE provider.
  */
-public class JceCipher implements CryptoCipher {
+public class JceCipher implements Cipher {
   private final Properties props;
   private final CipherTransformation transformation;
   private final javax.crypto.Cipher cipher;
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.cipher.CryptoCipher} based on JCE
+   * Constructs a {@link org.apache.commons.crypto.cipher.Cipher} based on JCE
    * Cipher {@link javax.crypto.Cipher}.
    * @param props properties for JCE cipher
    * @param transformation transformation for JCE cipher
diff --git a/src/main/java/org/apache/commons/crypto/cipher/Openssl.java b/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
index 488438b..9365859 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
@@ -87,7 +87,7 @@ public final class Openssl {
       }
     } catch (Throwable t) {
       loadingFailure = t.getMessage();
-      LOG.debug("Failed to load OpenSSL CryptoCipher.", t);
+      LOG.debug("Failed to load OpenSSL Cipher.", t);
     } finally {
       loadingFailureReason = loadingFailure;
     }
diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpensslCipher.java b/src/main/java/org/apache/commons/crypto/cipher/OpensslCipher.java
index e258466..72b247b 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpensslCipher.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpensslCipher.java
@@ -34,15 +34,15 @@ import javax.crypto.spec.IvParameterSpec;
 import org.apache.commons.crypto.utils.Utils;
 
 /**
- * Implements the CryptoCipher using JNI into OpenSSL.
+ * Implements the Cipher using JNI into OpenSSL.
  */
-public class OpensslCipher implements CryptoCipher {
+public class OpensslCipher implements Cipher {
   private final Properties props;
   private final CipherTransformation transformation;
   private final Openssl cipher;
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.cipher.CryptoCipher} using JNI into OpenSSL
+   * Constructs a {@link org.apache.commons.crypto.cipher.Cipher} using JNI into OpenSSL
    * 
    * @param props properties for OpenSSL cipher
    * @param transformation transformation for OpenSSL cipher
diff --git a/src/main/java/org/apache/commons/crypto/cipher/package-info.java b/src/main/java/org/apache/commons/crypto/cipher/package-info.java
index 0da563f..c650b57 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/package-info.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/package-info.java
@@ -17,6 +17,6 @@
  */
 
 /**
- * CryptoCipher classes
+ * Cipher classes
  */
 package org.apache.commons.crypto.cipher;
diff --git a/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java b/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
index 989cee3..ae07758 100644
--- a/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
+++ b/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
@@ -17,9 +17,7 @@
  */
 package org.apache.commons.crypto.conf;
 
-import org.apache.commons.crypto.cipher.CryptoCipher;
 import org.apache.commons.crypto.cipher.OpensslCipher;
-import org.apache.commons.crypto.random.CryptoRandom;
 
 /**
  * The ConfigurationKeys contains Configuration keys and default values.
@@ -43,7 +41,7 @@ public class ConfigurationKeys {
    * "org.apache.commons.crypto.cipher.JceCipher" and "org.apache.commons.crypto.cipher.OpensslCipher".
    * And it takes a common separated list.
    * The "org.apache.commons.crypto.cipher.JceCipher" use jce provider to
-   * implement {@link org.apache.commons.crypto.cipher.CryptoCipher} and
+   * implement {@link org.apache.commons.crypto.cipher.Cipher} and
    * the "org.apache.commons.crypto.cipher.OpensslCipher" use jni into openssl to implement.
    * Note that for each value,the first value which can be created without exception
    * will be used (priority by order).
@@ -91,11 +89,11 @@ public class ConfigurationKeys {
   /**
    * The configuration key of the implementation class for secure random.
    * The values of COMMONS_CRYPTO_SECURE_RANDOM_CLASSES_KEY can be
-   * "org.apache.commons.crypto.random.JavaCryptoRandom" and "org.apache.commons.crypto.random.OpensslCryptoRandom".
+   * "org.apache.commons.crypto.random.JavaSecureRandom" and "org.apache.commons.crypto.random.OpensslSecureRandom".
    * And it takes a common separated list.
-   * The "org.apache.commons.crypto.random.JavaCryptoRandom" use java to
-   * implement {@link CryptoRandom} and
-   * the "org.apache.commons.crypto.random.OpensslCryptoRandom" use jni into openssl to implement.
+   * The "org.apache.commons.crypto.random.JavaSecureRandom" use java to
+   * implement {@link org.apache.commons.crypto.random.SecureRandom} and
+   * the "org.apache.commons.crypto.random.OpensslSecureRandom" use jni into openssl to implement.
    * Note that for each value,the first value which can be created without exception
    * will be used (priority by order).
    */
diff --git a/src/main/java/org/apache/commons/crypto/random/JavaCryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/JavaSecureRandom.java
similarity index 84%
rename from src/main/java/org/apache/commons/crypto/random/JavaCryptoRandom.java
rename to src/main/java/org/apache/commons/crypto/random/JavaSecureRandom.java
index aff8f39..60b8448 100644
--- a/src/main/java/org/apache/commons/crypto/random/JavaCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/JavaSecureRandom.java
@@ -26,22 +26,22 @@ import org.apache.commons.logging.LogFactory;
 import org.apache.commons.crypto.conf.ConfigurationKeys;
 
 /**
- * A CryptoRandom of Java implementation.
+ * A SecureRandom of Java implementation.
  */
-public class JavaCryptoRandom implements CryptoRandom {
+public class JavaSecureRandom implements SecureRandom {
   private static final Log LOG =
-      LogFactory.getLog(JavaCryptoRandom.class.getName());
+      LogFactory.getLog(JavaSecureRandom.class.getName());
 
   private java.security.SecureRandom instance;
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.random.JavaCryptoRandom}.
+   * Constructs a {@link org.apache.commons.crypto.random.JavaSecureRandom}.
    *
    * @param properties the configuration properties.
    * @throws NoSuchAlgorithmException if no Provider supports a SecureRandomSpi implementation for
    *         the specified algorithm.
    */
-  public JavaCryptoRandom(Properties properties) throws NoSuchAlgorithmException {
+  public JavaSecureRandom(Properties properties) throws NoSuchAlgorithmException {
     try {
       instance = java.security.SecureRandom
           .getInstance(properties.getProperty(
@@ -55,7 +55,7 @@ public class JavaCryptoRandom implements CryptoRandom {
 
   /**
    * Overrides {@link java.lang.AutoCloseable#close()}.
-   * For{@link JavaCryptoRandom}, we don't need to recycle resource.
+   * For{@link JavaSecureRandom}, we don't need to recycle resource.
    */
   @Override
   public void close() {
@@ -63,7 +63,7 @@ public class JavaCryptoRandom implements CryptoRandom {
   }
 
   /**
-   * Overrides {@link org.apache.commons.crypto.random.CryptoRandom#nextBytes(byte[])}.
+   * Overrides {@link org.apache.commons.crypto.random.SecureRandom#nextBytes(byte[])}.
    * Generates random bytes and places them into a user-supplied byte array.
    * The number of random bytes produced is equal to the length of the byte array.
    *
diff --git a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/OpensslSecureRandom.java
similarity index 85%
rename from src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandom.java
rename to src/main/java/org/apache/commons/crypto/random/OpensslSecureRandom.java
index 406ddef..2ad3244 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpensslSecureRandom.java
@@ -41,21 +41,21 @@ import org.apache.commons.crypto.utils.Utils;
  * @see https://wiki.openssl.org/index.php/Random_Numbers
  * @see http://en.wikipedia.org/wiki/RdRand
  */
-public class OpensslCryptoRandom extends Random implements CryptoRandom {
+public class OpensslSecureRandom extends Random implements SecureRandom {
   private static final long serialVersionUID = -7828193502768789584L;
   private static final Log LOG =
-      LogFactory.getLog(OpensslCryptoRandom.class.getName());
+      LogFactory.getLog(OpensslSecureRandom.class.getName());
 
-  /** If native CryptoRandom unavailable, use java SecureRandom */
-  private JavaCryptoRandom fallback = null;
+  /** If native SecureRandom unavailable, use java SecureRandom */
+  private JavaSecureRandom fallback = null;
   private static boolean nativeEnabled = false;
   static {
     if (NativeCodeLoader.isNativeCodeLoaded()) {
       try {
-        OpensslCryptoRandomNative.initSR();
+        OpensslSecureRandomNative.initSR();
         nativeEnabled = true;
       } catch (Throwable t) {
-        LOG.error("Failed to load Openssl CryptoRandom", t);
+        LOG.error("Failed to load Openssl SecureRandom", t);
       }
     }
   }
@@ -70,15 +70,15 @@ public class OpensslCryptoRandom extends Random implements CryptoRandom {
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.random.OpensslCryptoRandom}.
+   * Constructs a {@link org.apache.commons.crypto.random.OpensslSecureRandom}.
    *
    * @param props the configuration properties.
    * @throws NoSuchAlgorithmException if no Provider supports a SecureRandomSpi implementation for
    *         the specified algorithm.
    */
-  public OpensslCryptoRandom(Properties props) throws NoSuchAlgorithmException {
+  public OpensslSecureRandom(Properties props) throws NoSuchAlgorithmException {
     if (!nativeEnabled) {
-      fallback = new JavaCryptoRandom(props);
+      fallback = new JavaSecureRandom(props);
     }
   }
 
@@ -90,14 +90,14 @@ public class OpensslCryptoRandom extends Random implements CryptoRandom {
    */
   @Override
   public void nextBytes(byte[] bytes) {
-    if (!nativeEnabled || !OpensslCryptoRandomNative.nextRandBytes(bytes)) {
+    if (!nativeEnabled || !OpensslSecureRandomNative.nextRandBytes(bytes)) {
       fallback.nextBytes(bytes);
     }
   }
 
   /**
-   * Overrides {@link OpensslCryptoRandom}.
-   * For {@link OpensslCryptoRandom}, we don't need to set seed.
+   * Overrides {@link OpensslSecureRandom}.
+   * For {@link OpensslSecureRandom}, we don't need to set seed.
    *
    * @param seed the initial seed.
    */
diff --git a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java b/src/main/java/org/apache/commons/crypto/random/OpensslSecureRandomNative.java
similarity index 80%
rename from src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
rename to src/main/java/org/apache/commons/crypto/random/OpensslSecureRandomNative.java
index c72cad6..c36083f 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpensslSecureRandomNative.java
@@ -18,13 +18,13 @@
 package org.apache.commons.crypto.random;
 
 /**
- * JNI interface of {@link CryptoRandom} implementation.
+ * JNI interface of {@link SecureRandom} implementation.
  * The native method in this class is defined in
- * OpensslCryptoRandomNative.h(genereted by javah).
+ * OpensslSecureRandomNative.h(genereted by javah).
  */
-public class OpensslCryptoRandomNative {
+public class OpensslSecureRandomNative {
 
-  private OpensslCryptoRandomNative() {}
+  private OpensslSecureRandomNative() {}
 
   /**
    * Declares a native method to initialize SR.
@@ -32,11 +32,11 @@ public class OpensslCryptoRandomNative {
   public native static void initSR();
 
   /**
-   * Judges whether use {@link OpensslCryptoRandomNative} to
+   * Judges whether use {@link OpensslSecureRandomNative} to
    * generate the user-specified number of random bits.
    *
    * @param bytes the array to be filled in with random bytes.
-   * @return true if use {@link OpensslCryptoRandomNative} to
+   * @return true if use {@link OpensslSecureRandomNative} to
    * generate the user-specified number of random bits.
    */
   public native static boolean nextRandBytes(byte[] bytes); 
diff --git a/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/OsSecureRandom.java
similarity index 92%
rename from src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
rename to src/main/java/org/apache/commons/crypto/random/OsSecureRandom.java
index 4e6c063..916ad10 100644
--- a/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/OsSecureRandom.java
@@ -32,8 +32,8 @@ import org.apache.commons.logging.LogFactory;
  * A Random implementation that uses random bytes sourced from the
  * operating system.
  */
-public class OsCryptoRandom extends Random implements CryptoRandom {
-  public static final Log LOG = LogFactory.getLog(OsCryptoRandom.class);
+public class OsSecureRandom extends Random implements SecureRandom {
+  public static final Log LOG = LogFactory.getLog(OsSecureRandom.class);
   
   private static final long serialVersionUID = 6391500337172057900L;
 
@@ -59,11 +59,11 @@ public class OsCryptoRandom extends Random implements CryptoRandom {
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.random.OsCryptoRandom}.
+   * Constructs a {@link org.apache.commons.crypto.random.OsSecureRandom}.
    *
    * @param props the configuration properties.
    */
-  public OsCryptoRandom(Properties props) {
+  public OsSecureRandom(Properties props) {
     randomDevPath = Utils.getRandomDevPath(props);
     File randomDevFile = new File(randomDevPath);
 
@@ -83,7 +83,7 @@ public class OsCryptoRandom extends Random implements CryptoRandom {
   }
 
   /**
-   * Overrides {@link org.apache.commons.crypto.random.CryptoRandom#nextBytes(byte[])}.
+   * Overrides {@link org.apache.commons.crypto.random.SecureRandom#nextBytes(byte[])}.
    * Generates random bytes and places them into a user-supplied byte array.
    * The number of random bytes produced is equal to the length of the byte array.
    *
diff --git a/src/main/java/org/apache/commons/crypto/random/CryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/SecureRandom.java
similarity index 93%
rename from src/main/java/org/apache/commons/crypto/random/CryptoRandom.java
rename to src/main/java/org/apache/commons/crypto/random/SecureRandom.java
index 8194a9b..69c5559 100644
--- a/src/main/java/org/apache/commons/crypto/random/CryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/SecureRandom.java
@@ -20,9 +20,9 @@ package org.apache.commons.crypto.random;
 import java.io.Closeable;
 
 /**
- * The interface for CryptoRandom.
+ * The interface for SecureRandom.
  */
-public interface CryptoRandom extends Closeable {
+public interface SecureRandom extends Closeable {
 
   /**
    * Generates random bytes and places them into a user-supplied
diff --git a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java b/src/main/java/org/apache/commons/crypto/random/SecureRandomFactory.java
similarity index 66%
rename from src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
rename to src/main/java/org/apache/commons/crypto/random/SecureRandomFactory.java
index 8c9fd35..3e42857 100644
--- a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
+++ b/src/main/java/org/apache/commons/crypto/random/SecureRandomFactory.java
@@ -30,47 +30,47 @@ import static org.apache.commons.crypto.conf.ConfigurationKeys
     .COMMONS_CRYPTO_SECURE_RANDOM_CLASSES_KEY;
 
 /**
- * This is the factory class used for {@link CryptoRandom}.
+ * This is the factory class used for {@link SecureRandom}.
  */
-public class CryptoRandomFactory {
+public class SecureRandomFactory {
   public final static Logger LOG = LoggerFactory
-      .getLogger(CryptoRandomFactory.class);
+      .getLogger(SecureRandomFactory.class);
 
-  private CryptoRandomFactory() {}
+  private SecureRandomFactory() {}
 
   /**
-   * Gets a CryptoRandom instance for specified props.
+   * Gets a SecureRandom instance for specified props.
    *
    * @param props the configuration properties.
-   * @return CryptoRandom the cryptoRandom object.Null value will be returned if no CryptoRandom
+   * @return SecureRandom the secureRandom object.Null value will be returned if no SecureRandom
    *         classes with props.
-   * @throws GeneralSecurityException if fail to create the {@link CryptoRandom}.
+   * @throws GeneralSecurityException if fail to create the {@link SecureRandom}.
    */
-  public static CryptoRandom getCryptoRandom(Properties props) throws GeneralSecurityException {
-    String cryptoRandomClasses = props.getProperty(
+  public static SecureRandom getSecureRandom(Properties props) throws GeneralSecurityException {
+    String secureRandomClasses = props.getProperty(
         COMMONS_CRYPTO_SECURE_RANDOM_CLASSES_KEY);
-    if (cryptoRandomClasses == null) {
-      cryptoRandomClasses = System.getProperty(
+    if (secureRandomClasses == null) {
+      secureRandomClasses = System.getProperty(
           COMMONS_CRYPTO_SECURE_RANDOM_CLASSES_KEY);
     }
 
-    CryptoRandom random = null;
-    if (cryptoRandomClasses != null) {
-      for (String klassName : Utils.splitClassNames(cryptoRandomClasses, ",")) {
+    SecureRandom random = null;
+    if (secureRandomClasses != null) {
+      for (String klassName : Utils.splitClassNames(secureRandomClasses, ",")) {
         try {
           final Class<?> klass = ReflectionUtils.getClassByName(klassName);
-          random = (CryptoRandom) ReflectionUtils.newInstance(klass, props);
+          random = (SecureRandom) ReflectionUtils.newInstance(klass, props);
           if (random != null) {
             break;
           }
         } catch (ClassCastException e) {
-          LOG.error("Class {} is not a CryptoCipher.", klassName);
+          LOG.error("Class {} is not a Cipher.", klassName);
         } catch (ClassNotFoundException e) {
-          LOG.error("CryptoCipher {} not found.", klassName);
+          LOG.error("Cipher {} not found.", klassName);
         }
       }
     }
 
-    return (random == null) ? new JavaCryptoRandom(props) : random;
+    return (random == null) ? new JavaSecureRandom(props) : random;
   }
 }
diff --git a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/CTRCipherInputStream.java
similarity index 85%
rename from src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
rename to src/main/java/org/apache/commons/crypto/stream/CTRCipherInputStream.java
index dd9202d..b0cea74 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CTRCipherInputStream.java
@@ -30,7 +30,7 @@ import javax.crypto.ShortBufferException;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
 
-import org.apache.commons.crypto.cipher.CryptoCipher;
+import org.apache.commons.crypto.cipher.Cipher;
 import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.stream.input.ChannelInput;
 import org.apache.commons.crypto.stream.input.Input;
@@ -38,7 +38,7 @@ import org.apache.commons.crypto.stream.input.StreamInput;
 import org.apache.commons.crypto.utils.Utils;
 
 /**
- * CTRCryptoInputStream decrypts data. AES CTR mode is required in order to
+ * CTRCipherInputStream decrypts data. AES CTR mode is required in order to
  * ensure that the plain text and cipher text have a 1:1 mapping. CTR crypto
  * stream has stream characteristic which is useful for implement features
  * like random seek. The decryption is buffer based. The key points of the
@@ -50,7 +50,7 @@ import org.apache.commons.crypto.utils.Utils;
  * <p/>
  * The underlying stream offset is maintained as state. It is not thread-safe.
  */
-public class CTRCryptoInputStream extends CryptoInputStream {
+public class CTRCipherInputStream extends CipherInputStream {
   /**
    * Underlying stream offset
    */
@@ -79,7 +79,7 @@ public class CTRCryptoInputStream extends CryptoInputStream {
   private boolean cipherReset = false;
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoInputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherInputStream}.
    *
    * @param props The <code>Properties</code> class represents a set of
    *              properties.
@@ -88,14 +88,14 @@ public class CTRCryptoInputStream extends CryptoInputStream {
    * @param iv Initialization vector for the cipher.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoInputStream(Properties props, InputStream in,
-                              byte[] key, byte[] iv)
+  public CTRCipherInputStream(Properties props, InputStream in,
+      byte[] key, byte[] iv)
       throws IOException {
     this(props, in, key, iv, 0);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoInputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherInputStream}.
    *
    * @param props The <code>Properties</code> class represents a set of
    *              properties.
@@ -104,29 +104,29 @@ public class CTRCryptoInputStream extends CryptoInputStream {
    * @param iv Initialization vector for the cipher.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoInputStream(Properties props, ReadableByteChannel in,
-                              byte[] key, byte[] iv)
+  public CTRCipherInputStream(Properties props, ReadableByteChannel in,
+      byte[] key, byte[] iv)
       throws IOException {
     this(props, in, key, iv, 0);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoInputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherInputStream}.
    *
    * @param in the input stream.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param iv Initialization vector for the cipher.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoInputStream(InputStream in, CryptoCipher cipher, int bufferSize,
-                              byte[] key, byte[] iv) throws IOException {
+  public CTRCipherInputStream(InputStream in, Cipher cipher, int bufferSize,
+      byte[] key, byte[] iv) throws IOException {
     this(in, cipher, bufferSize, key, iv, 0);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoInputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherInputStream}.
    *
    * @param in the ReadableByteChannel instance.
    * @param cipher the cipher instance.
@@ -135,24 +135,24 @@ public class CTRCryptoInputStream extends CryptoInputStream {
    * @param iv Initialization vector for the cipher.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoInputStream(ReadableByteChannel in, CryptoCipher cipher,
-                              int bufferSize, byte[] key, byte[] iv) throws IOException {
+  public CTRCipherInputStream(ReadableByteChannel in, Cipher cipher,
+      int bufferSize, byte[] key, byte[] iv) throws IOException {
     this(in, cipher, bufferSize, key, iv, 0);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoInputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherInputStream}.
    *
    * @param input the input data.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param iv Initialization vector for the cipher.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoInputStream(
+  public CTRCipherInputStream(
       Input input,
-      CryptoCipher cipher,
+      Cipher cipher,
       int bufferSize,
       byte[] key,
       byte[] iv) throws IOException {
@@ -160,7 +160,7 @@ public class CTRCryptoInputStream extends CryptoInputStream {
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoInputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherInputStream}.
    *
    * @param props The <code>Properties</code> class represents a set of
    *              properties.
@@ -170,15 +170,15 @@ public class CTRCryptoInputStream extends CryptoInputStream {
    * @param streamOffset the start offset in the stream.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoInputStream(Properties props, InputStream in,
-                              byte[] key, byte[] iv, long streamOffset)
+  public CTRCipherInputStream(Properties props, InputStream in,
+      byte[] key, byte[] iv, long streamOffset)
       throws IOException {
     this(in, Utils.getCipherInstance(CipherTransformation.AES_CTR_NOPADDING, props),
         Utils.getBufferSize(props), key, iv, streamOffset);
   }
 
   /**
-   *Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoInputStream}.
+   *Constructs a {@link org.apache.commons.crypto.stream.CTRCipherInputStream}.
    *
    * @param props The <code>Properties</code> class represents a set of
    *              properties.
@@ -188,59 +188,59 @@ public class CTRCryptoInputStream extends CryptoInputStream {
    * @param streamOffset the start offset in the stream.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoInputStream(Properties props, ReadableByteChannel in,
-                              byte[] key, byte[] iv, long streamOffset)
+  public CTRCipherInputStream(Properties props, ReadableByteChannel in,
+      byte[] key, byte[] iv, long streamOffset)
       throws IOException {
     this(in, Utils.getCipherInstance(CipherTransformation.AES_CTR_NOPADDING, props),
         Utils.getBufferSize(props), key, iv, streamOffset);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoInputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherInputStream}.
    *
    * @param in the InputStream instance.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param iv Initialization vector for the cipher.
    * @param streamOffset the start offset in the stream.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoInputStream(InputStream in, CryptoCipher cipher, int bufferSize,
-                              byte[] key, byte[] iv, long streamOffset) throws IOException {
+  public CTRCipherInputStream(InputStream in, Cipher cipher, int bufferSize,
+      byte[] key, byte[] iv, long streamOffset) throws IOException {
     this(new StreamInput(in, bufferSize), cipher, bufferSize, key, iv, streamOffset);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoInputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherInputStream}.
    *
    * @param in the ReadableByteChannel instance.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param iv Initialization vector for the cipher.
    * @param streamOffset the start offset in the stream.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoInputStream(ReadableByteChannel in, CryptoCipher cipher,
-                              int bufferSize, byte[] key, byte[] iv, long streamOffset) throws IOException {
+  public CTRCipherInputStream(ReadableByteChannel in, Cipher cipher,
+      int bufferSize, byte[] key, byte[] iv, long streamOffset) throws IOException {
     this(new ChannelInput(in), cipher, bufferSize, key, iv, streamOffset);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoInputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherInputStream}.
    *
    * @param input the input data.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param iv Initialization vector for the cipher.
    * @param streamOffset the start offset in the stream.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoInputStream(
+  public CTRCipherInputStream(
       Input input,
-      CryptoCipher cipher,
+      Cipher cipher,
       int bufferSize,
       byte[] key,
       byte[] iv,
@@ -256,7 +256,7 @@ public class CTRCryptoInputStream extends CryptoInputStream {
   }
 
   /**
-   * Overrides the {@link org.apache.commons.crypto.stream.CryptoInputStream#skip(long)}.
+   * Overrides the {@link org.apache.commons.crypto.stream.CipherInputStream#skip(long)}.
    * Skips over and discards <code>n</code> bytes of data from this input
    * stream.
    *
@@ -295,7 +295,7 @@ public class CTRCryptoInputStream extends CryptoInputStream {
   }
 
   /**
-   * Overrides the {@link org.apache.commons.crypto.stream.CTRCryptoInputStream#read(ByteBuffer)}.
+   * Overrides the {@link org.apache.commons.crypto.stream.CTRCipherInputStream#read(ByteBuffer)}.
    * Reads a sequence of bytes from this channel into the given buffer.
    *
    * @param buf The buffer into which bytes are to be transferred.
@@ -548,7 +548,7 @@ public class CTRCryptoInputStream extends CryptoInputStream {
   }
 
   /**
-   * Overrides the {@link CTRCryptoInputStream#initCipher()}.
+   * Overrides the {@link CTRCipherInputStream#initCipher()}.
    * Initializes the cipher.
    */
   @Override
@@ -568,7 +568,7 @@ public class CTRCryptoInputStream extends CryptoInputStream {
     final long counter = getCounter(position);
     Utils.calculateIV(initIV, counter, iv);
     try {
-      cipher.init(CryptoCipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
+      cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
     } catch (InvalidKeyException e) {
       throw new IOException(e);
     } catch (InvalidAlgorithmParameterException e) {
@@ -607,9 +607,9 @@ public class CTRCryptoInputStream extends CryptoInputStream {
       int n = cipher.update(inBuffer, out);
       if (n < inputSize) {
         /**
-         * Typically code will not get here. CryptoCipher#update will consume all
+         * Typically code will not get here. Cipher#update will consume all
          * input data and put result in outBuffer.
-         * CryptoCipher#doFinal will reset the cipher context.
+         * Cipher#doFinal will reset the cipher context.
          */
         cipher.doFinal(inBuffer, out);
         cipherReset = true;
diff --git a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoOutputStream.java b/src/main/java/org/apache/commons/crypto/stream/CTRCipherOutputStream.java
similarity index 82%
rename from src/main/java/org/apache/commons/crypto/stream/CTRCryptoOutputStream.java
rename to src/main/java/org/apache/commons/crypto/stream/CTRCipherOutputStream.java
index 483f03c..7889123 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoOutputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CTRCipherOutputStream.java
@@ -31,7 +31,7 @@ import javax.crypto.ShortBufferException;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
 
-import org.apache.commons.crypto.cipher.CryptoCipher;
+import org.apache.commons.crypto.cipher.Cipher;
 import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.stream.output.ChannelOutput;
 import org.apache.commons.crypto.stream.output.Output;
@@ -39,7 +39,7 @@ import org.apache.commons.crypto.stream.output.StreamOutput;
 import org.apache.commons.crypto.utils.Utils;
 
 /**
- * CTRCryptoOutputStream encrypts data. It is not thread-safe. AES CTR mode is
+ * CTRCipherOutputStream encrypts data. It is not thread-safe. AES CTR mode is
  * required in order to ensure that the plain text and cipher text have a 1:1
  * mapping. The encryption is buffer based. The key points of the encryption are
  * (1) calculating counter and (2) padding through stream position.
@@ -49,7 +49,7 @@ import org.apache.commons.crypto.utils.Utils;
  * <p/>
  * The underlying stream offset is maintained as state.
  */
-public class CTRCryptoOutputStream extends CryptoOutputStream {
+public class CTRCipherOutputStream extends CipherOutputStream {
   /**
    * Underlying stream offset.
    */
@@ -78,7 +78,7 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
   private boolean cipherReset = false;
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherOutputStream}.
    *
    * @param props The <code>Properties</code> class represents a set of
    *              properties.
@@ -87,14 +87,14 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
    * @param iv Initialization vector for the cipher.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoOutputStream(Properties props, OutputStream out, byte[] key,
+  public CTRCipherOutputStream(Properties props, OutputStream out, byte[] key,
                                byte[] iv)
       throws IOException {
     this(props, out, key, iv, 0);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherOutputStream}.
    *
    * @param props The <code>Properties</code> class represents a set of
    *              properties.
@@ -103,60 +103,60 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
    * @param iv Initialization vector for the cipher.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoOutputStream(Properties props, WritableByteChannel out,
+  public CTRCipherOutputStream(Properties props, WritableByteChannel out,
                                byte[] key, byte[] iv)
       throws IOException {
     this(props, out, key, iv, 0);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherOutputStream}.
    *
    * @param out the output stream.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param iv Initialization vector for the cipher.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoOutputStream(OutputStream out, CryptoCipher cipher, int bufferSize,
+  public CTRCipherOutputStream(OutputStream out, Cipher cipher, int bufferSize,
                                byte[] key, byte[] iv) throws IOException {
     this(out, cipher, bufferSize, key, iv, 0);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherOutputStream}.
    *
    * @param channel the WritableByteChannel instance.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param iv Initialization vector for the cipher.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoOutputStream(WritableByteChannel channel, CryptoCipher cipher,
+  public CTRCipherOutputStream(WritableByteChannel channel, Cipher cipher,
                                int bufferSize, byte[] key, byte[] iv) throws IOException {
     this(channel, cipher, bufferSize, key, iv, 0);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherOutputStream}.
    *
    * @param output the Output instance.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param iv Initialization vector for the cipher.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoOutputStream(Output output, CryptoCipher cipher, int bufferSize,
+  public CTRCipherOutputStream(Output output, Cipher cipher, int bufferSize,
                                byte[] key, byte[] iv)
       throws IOException {
     this(output, cipher, bufferSize, key, iv, 0);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherOutputStream}.
    *
    * @param props The <code>Properties</code> class represents a set of
    *              properties.
@@ -166,7 +166,7 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
    * @param streamOffset the start offset in the data.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoOutputStream(Properties props, OutputStream out, byte[] key,
+  public CTRCipherOutputStream(Properties props, OutputStream out, byte[] key,
                                byte[] iv, long streamOffset)
       throws IOException {
     this(out, Utils.getCipherInstance(CipherTransformation.AES_CTR_NOPADDING, props),
@@ -174,7 +174,7 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherOutputStream}.
    *
    * @param props The <code>Properties</code> class represents a set of
    *              properties.
@@ -184,7 +184,7 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
    * @param streamOffset the start offset in the data.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoOutputStream(Properties props, WritableByteChannel out,
+  public CTRCipherOutputStream(Properties props, WritableByteChannel out,
                                byte[] key, byte[] iv, long streamOffset)
       throws IOException {
     this(out, Utils.getCipherInstance(CipherTransformation.AES_CTR_NOPADDING, props),
@@ -192,34 +192,34 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherOutputStream}.
    *
    * @param out the output stream.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param iv Initialization vector for the cipher.
    * @param streamOffset the start offset in the data.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoOutputStream(OutputStream out, CryptoCipher cipher, int bufferSize,
+  public CTRCipherOutputStream(OutputStream out, Cipher cipher, int bufferSize,
                                byte[] key, byte[] iv, long streamOffset) throws IOException {
     this(new StreamOutput(out, bufferSize), cipher,
         bufferSize, key, iv, streamOffset);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherOutputStream}.
    *
    * @param channel the WritableByteChannel instance.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param iv Initialization vector for the cipher.
    * @param streamOffset the start offset in the data.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoOutputStream(WritableByteChannel channel, CryptoCipher cipher,
+  public CTRCipherOutputStream(WritableByteChannel channel, Cipher cipher,
                                int bufferSize, byte[] key, byte[] iv,
                                long streamOffset) throws IOException {
     this(new ChannelOutput(channel), cipher,
@@ -227,17 +227,17 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CTRCryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CTRCipherOutputStream}.
    *
    * @param output the output stream.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param iv Initialization vector for the cipher.
    * @param streamOffset the start offset in the data.
    * @throws IOException if an I/O error occurs.
    */
-  public CTRCryptoOutputStream(Output output, CryptoCipher cipher, int bufferSize,
+  public CTRCipherOutputStream(Output output, Cipher cipher, int bufferSize,
                                byte[] key, byte[] iv, long streamOffset)
       throws IOException {
     super(output, cipher, bufferSize, new SecretKeySpec(key, "AES"), new IvParameterSpec(iv));
@@ -304,7 +304,7 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
   }
 
   /**
-   * Overrides the {@link CryptoOutputStream#initCipher()}.
+   * Overrides the {@link CipherOutputStream#initCipher()}.
    * Initializes the cipher.
    */
   @Override
@@ -327,7 +327,7 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
 
     Utils.calculateIV(initIV, counter, iv);
     try {
-      cipher.init(CryptoCipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));
+      cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));
     } catch (InvalidKeyException e) {
       throw new IOException(e);
     }catch (InvalidAlgorithmParameterException e) {
@@ -349,9 +349,9 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
       int n = cipher.update(inBuffer, out);
       if (n < inputSize) {
         /**
-         * Typically code will not get here. CryptoCipher#update will consume all
+         * Typically code will not get here. Cipher#update will consume all
          * input data and put result in outBuffer.
-         * CryptoCipher#doFinal will reset the cipher context.
+         * Cipher#doFinal will reset the cipher context.
          */
         cipher.doFinal(inBuffer, out);
         cipherReset = true;
diff --git a/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/CipherInputStream.java
similarity index 93%
rename from src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java
rename to src/main/java/org/apache/commons/crypto/stream/CipherInputStream.java
index 2d62a76..83df143 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CipherInputStream.java
@@ -32,7 +32,7 @@ import javax.crypto.IllegalBlockSizeException;
 import javax.crypto.ShortBufferException;
 import javax.crypto.spec.IvParameterSpec;
 
-import org.apache.commons.crypto.cipher.CryptoCipher;
+import org.apache.commons.crypto.cipher.Cipher;
 import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.stream.input.ChannelInput;
 import org.apache.commons.crypto.stream.input.Input;
@@ -45,12 +45,12 @@ import org.apache.commons.crypto.utils.Utils;
  *
  */
 
-public class CryptoInputStream extends InputStream implements
+public class CipherInputStream extends InputStream implements
     ReadableByteChannel {
   private final byte[] oneByteBuf = new byte[1];
 
-  /**The CryptoCipher instance.*/
-  final CryptoCipher cipher;
+  /**The Cipher instance.*/
+  final Cipher cipher;
 
   /**The buffer size.*/
   final int bufferSize;
@@ -83,7 +83,7 @@ public class CryptoInputStream extends InputStream implements
   protected ByteBuffer outBuffer;
 
   /**
-   * Constructs a {@link CryptoInputStream}.
+   * Constructs a {@link CipherInputStream}.
    *
    * @param transformation the CipherTransformation instance.
    * @param props The <code>Properties</code> class represents a set of
@@ -93,7 +93,7 @@ public class CryptoInputStream extends InputStream implements
    * @param params the algorithm parameters.
    * @throws IOException if an I/O error occurs.
    */
-  public CryptoInputStream(CipherTransformation transformation,
+  public CipherInputStream(CipherTransformation transformation,
                            Properties props, InputStream in, Key key, AlgorithmParameterSpec params)
       throws IOException {
     this(in, Utils.getCipherInstance(transformation, props), Utils.getBufferSize(props), key,
@@ -101,7 +101,7 @@ public class CryptoInputStream extends InputStream implements
   }
 
   /**
-   * Constructs a {@link CryptoInputStream}.
+   * Constructs a {@link CipherInputStream}.
    *
    * @param transformation the CipherTransformation instance.
    * @param props The <code>Properties</code> class represents a set of
@@ -111,7 +111,7 @@ public class CryptoInputStream extends InputStream implements
    * @param params the algorithm parameters.
    * @throws IOException if an I/O error occurs.
    */
-  public CryptoInputStream(CipherTransformation transformation,
+  public CipherInputStream(CipherTransformation transformation,
                            Properties props, ReadableByteChannel in, Key key, AlgorithmParameterSpec params)
       throws IOException {
     this(in, Utils.getCipherInstance(transformation, props),
@@ -119,7 +119,7 @@ public class CryptoInputStream extends InputStream implements
   }
 
   /**
-   * Constructs a {@link CryptoInputStream}.
+   * Constructs a {@link CipherInputStream}.
    *
    * @param cipher the cipher instance.
    * @param in the input stream.
@@ -128,13 +128,13 @@ public class CryptoInputStream extends InputStream implements
    * @param params the algorithm parameters.
    * @throws IOException if an I/O error occurs.
    */
-  public CryptoInputStream(InputStream in, CryptoCipher cipher, int bufferSize,
+  public CipherInputStream(InputStream in, Cipher cipher, int bufferSize,
                            Key key, AlgorithmParameterSpec params) throws IOException {
     this(new StreamInput(in, bufferSize), cipher, bufferSize, key, params);
   }
 
   /**
-   * Constructs a {@link CryptoInputStream}.
+   * Constructs a {@link CipherInputStream}.
    *
    * @param in the ReadableByteChannel instance.
    * @param cipher the cipher instance.
@@ -143,13 +143,13 @@ public class CryptoInputStream extends InputStream implements
    * @param params the algorithm parameters.
    * @throws IOException if an I/O error occurs.
    */
-  public CryptoInputStream(ReadableByteChannel in, CryptoCipher cipher,
+  public CipherInputStream(ReadableByteChannel in, Cipher cipher,
                            int bufferSize, Key key, AlgorithmParameterSpec params) throws IOException {
     this(new ChannelInput(in), cipher, bufferSize, key, params);
   }
 
   /**
-   * Constructs a {@link CryptoInputStream}.
+   * Constructs a {@link CipherInputStream}.
    *
    * @param input the input data.
    * @param cipher the cipher instance.
@@ -158,7 +158,7 @@ public class CryptoInputStream extends InputStream implements
    * @param params the algorithm parameters.
    * @throws IOException if an I/O error occurs.
    */
-  public CryptoInputStream(Input input, CryptoCipher cipher, int bufferSize,
+  public CipherInputStream(Input input, Cipher cipher, int bufferSize,
                            Key key, AlgorithmParameterSpec params) throws IOException {
     this.input = input;
     this.cipher = cipher;
@@ -319,7 +319,7 @@ public class CryptoInputStream extends InputStream implements
 
   /**
    * Overrides the {@link java.io.InputStream#mark(int)}.
-   * For {@link CryptoInputStream},we don't support the mark method.
+   * For {@link CipherInputStream},we don't support the mark method.
    *
    * @param readlimit the maximum limit of bytes that can be read before
    *                  the mark position becomes invalid.
@@ -330,7 +330,7 @@ public class CryptoInputStream extends InputStream implements
 
   /**
    * Overrides the {@link InputStream#reset()}.
-   * For {@link CryptoInputStream},we don't support the reset method.
+   * For {@link CipherInputStream},we don't support the reset method.
    *
    * @throws IOException if an I/O error occurs.
    */
@@ -415,11 +415,11 @@ public class CryptoInputStream extends InputStream implements
 
 
   /**
-   * Gets the internal CryptoCipher.
+   * Gets the internal Cipher.
    *
    * @return the cipher instance.
    */
-  protected CryptoCipher getCipher() {
+  protected Cipher getCipher() {
     return cipher;
   }
 
@@ -449,7 +449,7 @@ public class CryptoInputStream extends InputStream implements
   protected void initCipher()
       throws IOException {
     try {
-      cipher.init(CryptoCipher.DECRYPT_MODE, key, params);
+      cipher.init(Cipher.DECRYPT_MODE, key, params);
     } catch (InvalidKeyException e) {
       throw new IOException(e);
     } catch(InvalidAlgorithmParameterException e) {
diff --git a/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java b/src/main/java/org/apache/commons/crypto/stream/CipherOutputStream.java
similarity index 90%
rename from src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java
rename to src/main/java/org/apache/commons/crypto/stream/CipherOutputStream.java
index 7735385..57a0e1b 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CipherOutputStream.java
@@ -34,7 +34,7 @@ import javax.crypto.IllegalBlockSizeException;
 import javax.crypto.ShortBufferException;
 import javax.crypto.spec.IvParameterSpec;
 
-import org.apache.commons.crypto.cipher.CryptoCipher;
+import org.apache.commons.crypto.cipher.Cipher;
 import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.stream.output.ChannelOutput;
 import org.apache.commons.crypto.stream.output.Output;
@@ -42,20 +42,20 @@ import org.apache.commons.crypto.stream.output.StreamOutput;
 import org.apache.commons.crypto.utils.Utils;
 
 /**
- * {@link CryptoOutputStream} encrypts data and writes to the under layer
+ * {@link CipherOutputStream} encrypts data and writes to the under layer
  * output. It supports any mode of operations such as AES CBC/CTR/GCM mode
  * in concept. It is not thread-safe.
  */
 
-public class CryptoOutputStream extends OutputStream implements
+public class CipherOutputStream extends OutputStream implements
     WritableByteChannel {
   private final byte[] oneByteBuf = new byte[1];
 
   /** The output.*/
   Output output;
 
-  /**the CryptoCipher instance*/
-  final CryptoCipher cipher;
+  /**the Cipher instance*/
+  final Cipher cipher;
 
   /**The buffer size.*/
   final int bufferSize;
@@ -82,7 +82,7 @@ public class CryptoOutputStream extends OutputStream implements
   ByteBuffer outBuffer;
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CipherOutputStream}.
    *
    * @param transformation the CipherTransformation instance.
    * @param props The <code>Properties</code> class represents a set of
@@ -92,20 +92,18 @@ public class CryptoOutputStream extends OutputStream implements
    * @param params the algorithm parameters.
    * @throws IOException if an I/O error occurs.
    */
-
-
-  public CryptoOutputStream(
+  public CipherOutputStream(
     CipherTransformation transformation,
     Properties props,
     OutputStream out,
     Key key,
     AlgorithmParameterSpec params) throws IOException {
-    this(out, Utils.getCipherInstance(transformation, props), Utils.getBufferSize(props), key, params);
-
+    this(out, Utils.getCipherInstance(transformation, props), Utils.getBufferSize(props), key,
+      params);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CipherOutputStream}.
    *
    * @param transformation the CipherTransformation instance.
    * @param props The <code>Properties</code> class represents a set of
@@ -115,34 +113,33 @@ public class CryptoOutputStream extends OutputStream implements
    * @param params the algorithm parameters.
    * @throws IOException if an I/O error occurs.
    */
-  public CryptoOutputStream(
+  public CipherOutputStream(
     CipherTransformation transformation,
     Properties props,
     WritableByteChannel out,
     Key key,
     AlgorithmParameterSpec params) throws IOException {
-    this(out, Utils.getCipherInstance(transformation, props),
-        Utils.getBufferSize(props), key, params);
-
+    this(out, Utils.getCipherInstance(transformation, props), Utils.getBufferSize(props), key,
+      params);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CipherOutputStream}.
    *
    * @param out the output stream.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param params the algorithm parameters.
    * @throws IOException if an I/O error occurs.
    */
-  public CryptoOutputStream(OutputStream out, CryptoCipher cipher, int bufferSize,
+  public CipherOutputStream(OutputStream out, Cipher cipher, int bufferSize,
                             Key key, AlgorithmParameterSpec params) throws IOException {
     this(new StreamOutput(out, bufferSize), cipher, bufferSize, key, params);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CipherOutputStream}.
    *
    * @param channel the WritableByteChannel instance.
    * @param cipher the cipher instance.
@@ -151,22 +148,22 @@ public class CryptoOutputStream extends OutputStream implements
    * @param params the algorithm parameters.
    * @throws IOException if an I/O error occurs.
    */
-  public CryptoOutputStream(WritableByteChannel channel, CryptoCipher cipher,
+  public CipherOutputStream(WritableByteChannel channel, Cipher cipher,
                             int bufferSize, Key key, AlgorithmParameterSpec params) throws IOException {
     this(new ChannelOutput(channel), cipher, bufferSize, key, params);
   }
 
   /**
-   * Constructs a {@link org.apache.commons.crypto.stream.CryptoOutputStream}.
+   * Constructs a {@link org.apache.commons.crypto.stream.CipherOutputStream}.
    *
    * @param output the output stream.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param params the algorithm parameters.
    * @throws IOException if an I/O error occurs.
    */
-  protected CryptoOutputStream(Output output, CryptoCipher cipher, int bufferSize,
+  protected CipherOutputStream(Output output, Cipher cipher, int bufferSize,
                                Key key, AlgorithmParameterSpec params)
       throws IOException {
 
@@ -333,7 +330,7 @@ public class CryptoOutputStream extends OutputStream implements
   protected void initCipher()
       throws IOException {
     try {
-      cipher.init(CryptoCipher.ENCRYPT_MODE, key, params);
+      cipher.init(Cipher.ENCRYPT_MODE, key, params);
     } catch (InvalidKeyException e) {
       throw new IOException(e);
     } catch(InvalidAlgorithmParameterException e) {
@@ -417,7 +414,7 @@ public class CryptoOutputStream extends OutputStream implements
    *
    * @return the cipher instance.
    */
-  protected CryptoCipher getCipher() {
+  protected Cipher getCipher() {
     return cipher;
   }
 
diff --git a/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/PositionedCipherInputStream.java
similarity index 90%
rename from src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
rename to src/main/java/org/apache/commons/crypto/stream/PositionedCipherInputStream.java
index 7efbec6..0a7c09b 100644
--- a/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/PositionedCipherInputStream.java
@@ -31,8 +31,8 @@ import javax.crypto.IllegalBlockSizeException;
 import javax.crypto.ShortBufferException;
 import javax.crypto.spec.IvParameterSpec;
 
-import org.apache.commons.crypto.cipher.CryptoCipher;
-import org.apache.commons.crypto.cipher.CryptoCipherFactory;
+import org.apache.commons.crypto.cipher.Cipher;
+import org.apache.commons.crypto.cipher.CipherFactory;
 import org.apache.commons.crypto.stream.input.Input;
 import org.apache.commons.crypto.utils.IOUtils;
 import org.apache.commons.crypto.utils.Utils;
@@ -40,11 +40,11 @@ import org.apache.commons.crypto.utils.Utils;
 import static org.apache.commons.crypto.cipher.CipherTransformation.AES_CTR_NOPADDING;
 
 /**
- * PositionedCryptoInputStream provides the capability to decrypt the stream starting
+ * PositionedCipherInputStream provides the capability to decrypt the stream starting
  * at random position as well as provides the foundation for positioned read for
  * decrypting. This needs a stream cipher mode such as AES CTR mode.
  */
-public class PositionedCryptoInputStream extends CTRCryptoInputStream {
+public class PositionedCipherInputStream extends CTRCipherInputStream {
 
   /**
    * DirectBuffer pool
@@ -53,13 +53,13 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
       ConcurrentLinkedQueue<ByteBuffer>();
 
   /**
-   * CryptoCipher pool
+   * Cipher pool
    */
   private final Queue<CipherState> cipherPool = new
       ConcurrentLinkedQueue<CipherState>();
 
   /**
-   * Constructs a {@link PositionedCryptoInputStream}.
+   * Constructs a {@link PositionedCipherInputStream}.
    *
    * @param props The <code>Properties</code> class represents a set of
    *              properties.
@@ -69,24 +69,24 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
    * @param streamOffset the start offset in the data.
    * @throws IOException if an I/O error occurs.
    */
-  public PositionedCryptoInputStream(Properties props, Input in, byte[] key,
+  public PositionedCipherInputStream(Properties props, Input in, byte[] key,
                                      byte[] iv, long streamOffset) throws IOException {
     this(in, Utils.getCipherInstance(AES_CTR_NOPADDING, props),
         Utils.getBufferSize(props), key, iv, streamOffset);
   }
 
   /**
-   * Constructs a {@link PositionedCryptoInputStream}.
+   * Constructs a {@link PositionedCipherInputStream}.
    *
    * @param input the input data.
-   * @param cipher the CryptoCipher instance.
+   * @param cipher the Cipher instance.
    * @param bufferSize the bufferSize.
    * @param key crypto key for the cipher.
    * @param iv Initialization vector for the cipher.
    * @param streamOffset the start offset in the data.
    * @throws IOException if an I/O error occurs.
    */
-  public PositionedCryptoInputStream(Input input, CryptoCipher cipher, int bufferSize,
+  public PositionedCipherInputStream(Input input, Cipher cipher, int bufferSize,
                                      byte[] key, byte[] iv, long streamOffset) throws IOException {
     super(input, cipher, bufferSize, key, iv, streamOffset);
   }
@@ -219,9 +219,9 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
       int n = state.getCipher().update(inBuffer, outBuffer);
       if (n < inputSize) {
         /**
-         * Typically code will not get here. CryptoCipher#update will consume all
+         * Typically code will not get here. Cipher#update will consume all
          * input data and put result in outBuffer.
-         * CryptoCipher#doFinal will reset the cipher context.
+         * Cipher#doFinal will reset the cipher context.
          */
         state.getCipher().doFinal(inBuffer, outBuffer);
         state.reset(true);
@@ -262,7 +262,7 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
     final long counter = getCounter(position);
     Utils.calculateIV(getInitIV(), counter, iv);
     try {
-      state.getCipher().init(CryptoCipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
+      state.getCipher().init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
     } catch (InvalidKeyException e) {
       throw new IOException(e);
     } catch (InvalidAlgorithmParameterException e) {
@@ -271,13 +271,13 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
     state.reset(false);
   }
 
-  /** Get CryptoCipher from pool */
+  /** Get Cipher from pool */
   private CipherState getCipherState() throws IOException {
     CipherState state = cipherPool.poll();
     if (state == null) {
-      CryptoCipher cipher;
+      Cipher cipher;
       try {
-        cipher = CryptoCipherFactory.getInstance(getCipher().getTransformation(),
+        cipher = CipherFactory.getInstance(getCipher().getTransformation(),
             getCipher().getProperties());
       } catch (GeneralSecurityException e) {
         throw new IOException(e);
@@ -288,7 +288,7 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
     return state;
   }
 
-  /** Return CryptoCipher to pool */
+  /** Return Cipher to pool */
   private void returnCipherState(CipherState state) {
     if (state != null) {
       cipherPool.add(state);
@@ -314,7 +314,7 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
   }
 
   /**
-   * Overrides the {@link CryptoInputStream#close()}.
+   * Overrides the {@link CipherInputStream#close()}.
    * Closes this input stream and releases any system resources associated
    * with the stream.
    *
@@ -339,15 +339,15 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
   }
 
   private class CipherState {
-    private CryptoCipher cipher;
+    private Cipher cipher;
     private boolean reset;
 
-    public CipherState(CryptoCipher cipher) {
+    public CipherState(Cipher cipher) {
       this.cipher = cipher;
       this.reset = false;
     }
 
-    public CryptoCipher getCipher() {
+    public Cipher getCipher() {
       return cipher;
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/stream/input/ChannelInput.java b/src/main/java/org/apache/commons/crypto/stream/input/ChannelInput.java
index ee24a0c..9aff624 100644
--- a/src/main/java/org/apache/commons/crypto/stream/input/ChannelInput.java
+++ b/src/main/java/org/apache/commons/crypto/stream/input/ChannelInput.java
@@ -23,7 +23,7 @@ import java.nio.channels.ReadableByteChannel;
 
 /**
  * The ChannelInput class takes a <code>ReadableByteChannel</code> object and
- * wraps it as <code>Input</code> object acceptable by <code>CryptoInputStream</code>.
+ * wraps it as <code>Input</code> object acceptable by <code>CipherInputStream</code>.
  */
 public class ChannelInput implements Input {
   private static final int SKIP_BUFFER_SIZE = 2048;
diff --git a/src/main/java/org/apache/commons/crypto/stream/input/Input.java b/src/main/java/org/apache/commons/crypto/stream/input/Input.java
index a63c6ca..2971edb 100644
--- a/src/main/java/org/apache/commons/crypto/stream/input/Input.java
+++ b/src/main/java/org/apache/commons/crypto/stream/input/Input.java
@@ -21,7 +21,7 @@ import java.io.IOException;
 import java.nio.ByteBuffer;
 
 /**
- * The Input interface abstract the input source of <code>CryptoInputStream</code> so that
+ * The Input interface abstract the input source of <code>CipherInputStream</code> so that
  * different implementation of input can be used. The implementation Input interface will usually
  * wraps an input mechanism such as <code>InputStream</code> or <code>ReadableByteChannel</code>.
  */
diff --git a/src/main/java/org/apache/commons/crypto/stream/input/StreamInput.java b/src/main/java/org/apache/commons/crypto/stream/input/StreamInput.java
index ac3739b..c7e6771 100644
--- a/src/main/java/org/apache/commons/crypto/stream/input/StreamInput.java
+++ b/src/main/java/org/apache/commons/crypto/stream/input/StreamInput.java
@@ -23,7 +23,7 @@ import java.nio.ByteBuffer;
 
 /**
  * The StreamInput class takes a <code>InputStream</code> object and
- * wraps it as <code>Input</code> object acceptable by <code>CryptoInputStream</code>.
+ * wraps it as <code>Input</code> object acceptable by <code>CipherInputStream</code>.
  */
 public class StreamInput implements Input {
   private byte[] buf;
diff --git a/src/main/java/org/apache/commons/crypto/stream/output/ChannelOutput.java b/src/main/java/org/apache/commons/crypto/stream/output/ChannelOutput.java
index bae82a8..0a60217 100644
--- a/src/main/java/org/apache/commons/crypto/stream/output/ChannelOutput.java
+++ b/src/main/java/org/apache/commons/crypto/stream/output/ChannelOutput.java
@@ -23,7 +23,7 @@ import java.nio.channels.WritableByteChannel;
 
 /**
  * The ChannelOutput class takes a <code>WritableByteChannel</code> object and wraps it as 
- * <code>Output</code> object acceptable by <code>CryptoOutputStream</code> as the output target.
+ * <code>Output</code> object acceptable by <code>CipherOutputStream</code> as the output target.
  */
 public class ChannelOutput implements Output {
 
diff --git a/src/main/java/org/apache/commons/crypto/stream/output/Output.java b/src/main/java/org/apache/commons/crypto/stream/output/Output.java
index 903fcea..c57a89e 100644
--- a/src/main/java/org/apache/commons/crypto/stream/output/Output.java
+++ b/src/main/java/org/apache/commons/crypto/stream/output/Output.java
@@ -21,7 +21,7 @@ import java.io.IOException;
 import java.nio.ByteBuffer;
 
 /**
- * The Output interface abstract the output target of <code>CryptoOutputStream</code> so that
+ * The Output interface abstract the output target of <code>CipherOutputStream</code> so that
  * different implementation of output can be used. The implementation Output interface will usually
  * wraps an output mechanism such as <code>OutputStream</code> or <code>WritableByteChannel</code>.
  */
diff --git a/src/main/java/org/apache/commons/crypto/stream/output/StreamOutput.java b/src/main/java/org/apache/commons/crypto/stream/output/StreamOutput.java
index e359c0d..73f0c74 100644
--- a/src/main/java/org/apache/commons/crypto/stream/output/StreamOutput.java
+++ b/src/main/java/org/apache/commons/crypto/stream/output/StreamOutput.java
@@ -22,8 +22,8 @@ import java.io.OutputStream;
 import java.nio.ByteBuffer;
 
 /**
- * The StreamOutput class takes a <code>OutputStream</code> object and wraps it as 
- * <code>Output</code> object acceptable by <code>CryptoOutputStream</code> as the output target.
+ * The StreamOutput class takes a <code>OutputStream</code> object and wraps it as
+ * <code>Output</code> object acceptable by <code>CipherOutputStream</code> as the output target.
  */
 public class StreamOutput implements Output {
   private byte[] buf;
diff --git a/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java b/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java
index 4e1abd1..99e6d8c 100644
--- a/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java
@@ -23,7 +23,7 @@ import java.util.Collections;
 import java.util.Map;
 import java.util.WeakHashMap;
 
-import org.apache.commons.crypto.cipher.CryptoCipher;
+import org.apache.commons.crypto.cipher.Cipher;
 
 /**
  * General utility methods for working with reflection.
@@ -37,7 +37,7 @@ public class ReflectionUtils {
   static {
     classLoader = Thread.currentThread().getContextClassLoader();
     if (classLoader == null) {
-      classLoader = CryptoCipher.class.getClassLoader();
+      classLoader = Cipher.class.getClassLoader();
     }
   }
 
@@ -51,7 +51,7 @@ public class ReflectionUtils {
 
   /**
    * A unique class which is used as a sentinel value in the caching
-   * for getClassByName. {@link CryptoCipher#getClassByNameOrNull(String)}.
+   * for getClassByName. {@link Cipher#getClassByNameOrNull(String)}.
    */
   private static abstract class NegativeCacheSentinel {}
 
diff --git a/src/main/java/org/apache/commons/crypto/utils/Utils.java b/src/main/java/org/apache/commons/crypto/utils/Utils.java
index fe413a1..c12fd9c 100644
--- a/src/main/java/org/apache/commons/crypto/utils/Utils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/Utils.java
@@ -26,8 +26,8 @@ import java.util.Enumeration;
 import java.util.List;
 import java.util.Properties;
 
-import org.apache.commons.crypto.cipher.CryptoCipher;
-import org.apache.commons.crypto.cipher.CryptoCipherFactory;
+import org.apache.commons.crypto.cipher.Cipher;
+import org.apache.commons.crypto.cipher.CipherFactory;
 import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.conf.ConfigurationKeys;
 
@@ -209,10 +209,10 @@ public class Utils {
   /**
    * Checks whether the cipher is supported streaming.
    *
-   * @param cipher the {@link CryptoCipher} instance.
+   * @param cipher the {@link org.apache.commons.crypto.cipher.Cipher} instance.
    * @throws IOException if an I/O error occurs.
    */
-  public static void checkStreamCipher(CryptoCipher cipher) throws IOException {
+  public static void checkStreamCipher(Cipher cipher) throws IOException {
     if (cipher.getTransformation() != CipherTransformation.AES_CTR_NOPADDING) {
       throw new IOException("AES/CTR/NoPadding is required");
     }
@@ -221,11 +221,11 @@ public class Utils {
   /**
    * Checks and floors buffer size.
    *
-   * @param cipher the {@link CryptoCipher} instance.
+   * @param cipher the {@link org.apache.commons.crypto.cipher.Cipher} instance.
    * @param bufferSize the buffer size.
    * @return the remaining buffer size.
    */
-  public static int checkBufferSize(CryptoCipher cipher, int bufferSize) {
+  public static int checkBufferSize(Cipher cipher, int bufferSize) {
     checkArgument(bufferSize >= MIN_BUFFER_SIZE,
         "Minimum value of buffer size is " + MIN_BUFFER_SIZE + ".");
     return bufferSize - bufferSize % cipher.getTransformation()
@@ -233,10 +233,10 @@ public class Utils {
   }
 
   /**
-   * This method is only for Counter (CTR) mode. Generally the CryptoCipher calculates the
+   * This method is only for Counter (CTR) mode. Generally the Cipher calculates the
    * IV and maintain encryption context internally.For example a
    * {@link javax.crypto.Cipher} will maintain its encryption context internally
-   * when we do encryption/decryption using the CryptoCipher#update interface.
+   * when we do encryption/decryption using the Cipher#update interface.
    * <p/>
    * Encryption/Decryption is not always on the entire file. For example,
    * in Hadoop, a node may only decrypt a portion of a file (i.e. a split).
@@ -269,18 +269,18 @@ public class Utils {
   }
 
   /**
-   * Helper method to create a CryptoCipher instance and throws only IOException.
+   * Helper method to create a Cipher instance and throws only IOException.
    *
    * @param props The <code>Properties</code> class represents a set of
    *              properties.
    * @param transformation the CipherTransformation instance.
-   * @return the CryptoCipher instance.
+   * @return the Cipher instance.
    * @throws IOException if an I/O error occurs.
    */
-  public static CryptoCipher getCipherInstance(CipherTransformation transformation,
-                                               Properties props) throws IOException {
+  public static Cipher getCipherInstance(CipherTransformation transformation,
+      Properties props) throws IOException {
     try {
-      return CryptoCipherFactory.getInstance(transformation, props);
+      return CipherFactory.getInstance(transformation, props);
     } catch (GeneralSecurityException e) {
       throw new IOException(e);
     }
