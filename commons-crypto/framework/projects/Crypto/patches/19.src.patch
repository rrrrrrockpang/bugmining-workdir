diff --git a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java b/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
index 9e59cff..9b2e58e 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
@@ -36,9 +36,6 @@ public class CryptoCipherFactory {
     private final static Logger LOG = LoggerFactory
             .getLogger(CryptoCipherFactory.class);
 
-    /**
-     * The private Constructor of {@link CryptoCipherFactory}.
-     */
     private CryptoCipherFactory() {
     }
 
@@ -91,12 +88,7 @@ public class CryptoCipherFactory {
         return getInstance(transformation, new Properties());
     }
 
-    /**
-     * Returns OpenSSLCipher if Properties is null or empty by default.
-     *
-     * @param props the configuration properties.
-     * @return the OpenSSLCipher instance.
-     */
+    // Return OpenSSLCipher if Properties is null or empty by default
     private static List<Class<? extends CryptoCipher>> getCipherClasses(
             Properties props) {
         List<Class<? extends CryptoCipher>> result = new ArrayList<Class<? extends CryptoCipher>>();
diff --git a/src/main/java/org/apache/commons/crypto/cipher/Openssl.java b/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
index 1d0e441..de8856c 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
@@ -47,14 +47,6 @@ public final class Openssl {
     private static enum AlgorithmMode {
         AES_CTR, AES_CBC;
 
-        /**
-         * Gets the mode.
-         *
-         * @param algorithm the algorithm.
-         * @param mode the mode.
-         * @return the Algorithm mode.
-         * @throws NoSuchAlgorithmException if the algorithm is not available.
-         */
         static int get(String algorithm, String mode)
                 throws NoSuchAlgorithmException {
             try {
@@ -70,13 +62,6 @@ public final class Openssl {
     private static enum Padding {
         NoPadding, PKCS5Padding;
 
-        /**
-         * Gets the Padding instance.
-         *
-         * @param padding the padding.
-         * @return the value of Padding.
-         * @throws NoSuchPaddingException if the padding is not available.
-         */
         static int get(String padding) throws NoSuchPaddingException {
             try {
                 return Padding.valueOf(padding).ordinal();
@@ -116,13 +101,6 @@ public final class Openssl {
         return loadingFailureReason;
     }
 
-    /**
-     * Constructs a {@Link Openssl} instance based on context, algorithm and padding.
-     *
-     * @param context the context.
-     * @param algorithm the algorithm.
-     * @param padding the padding.
-     */
     private Openssl(long context, int algorithm, int padding) {
         this.context = context;
         this.algorithm = algorithm;
@@ -158,13 +136,6 @@ public final class Openssl {
         final String mode;
         final String padding;
 
-        /**
-         * Constructs a {@Link Transform} based on the algorithm, mode and padding.
-         *
-         * @param algorithm the algorithm
-         * @param mode the mode.
-         * @param padding the padding.
-         */
         public Transform(String algorithm, String mode, String padding) {
             this.algorithm = algorithm;
             this.mode = mode;
@@ -172,13 +143,6 @@ public final class Openssl {
         }
     }
 
-    /**
-     * Gets the tokens of transformation.
-     *
-     * @param transformation the transformation.
-     * @return the {@Link Transform} instance.
-     * @throws NoSuchAlgorithmException if the transformation is null.
-     */
     private static Transform tokenizeTransformation(String transformation)
             throws NoSuchAlgorithmException {
         if (transformation == null) {
diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java b/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
index 7b4f5a5..9993098 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
@@ -25,9 +25,6 @@ import java.nio.ByteBuffer;
  */
 public class OpensslNative {
 
-  /**
-   * The private constructor of {@Link OpensslNative}.
-   */
     private OpensslNative() {
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java b/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
index 04d89b2..30edb1b 100644
--- a/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
+++ b/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
@@ -130,9 +130,6 @@ public class ConfigurationKeys {
     public static final String COMMONS_CRYPTO_LIB_TEMPDIR_KEY = CONF_PREFIX
             + "lib.tempdir";
 
-  /**
-   * The private constructor of {@Link ConfigurationKeys}.
-   */
     private ConfigurationKeys() {
     }
 }
diff --git a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java b/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
index eb536ef..b299353 100644
--- a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
+++ b/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
@@ -35,9 +35,6 @@ public class CryptoRandomFactory {
     public final static Logger LOG = LoggerFactory
             .getLogger(CryptoRandomFactory.class);
 
-  /**
-   * The private constructor of {@Link CryptoRandomFactory}.
-   */
     private CryptoRandomFactory() {
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java b/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
index 8301873..65078c3 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
@@ -22,9 +22,7 @@ package org.apache.commons.crypto.random;
  * this class is defined in OpensslCryptoRandomNative.h(genereted by javah).
  */
 public class OpensslCryptoRandomNative {
-    /**
-     * The private constructor of {@Link OpensslCryptoRandomNative}.
-     */
+
     private OpensslCryptoRandomNative() {
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
index 2e6fd00..eca62d2 100644
--- a/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
@@ -47,11 +47,6 @@ public class OsCryptoRandom extends Random implements CryptoRandom {
 
     private int pos = reservoir.length;
 
-    /**
-     * Fills the reservoir.
-     *
-     * @param min the length.
-     */
     private void fillReservoir(int min) {
         if (pos >= reservoir.length - min) {
             try {
diff --git a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
index bfdd6fb..f2df802 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
@@ -368,11 +368,6 @@ public class CTRCryptoInputStream extends CryptoInputStream {
         return streamOffset;
     }
 
-    /**
-     * Sets the offset of stream.
-     *
-     * @param streamOffset the stream offset.
-     */
     protected void setStreamOffset(long streamOffset) {
         this.streamOffset = streamOffset;
     }
diff --git a/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java b/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java
index f5f9d97..2cce827 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java
@@ -384,11 +384,6 @@ public class CryptoOutputStream extends OutputStream implements
         output.write(outBuffer);
     }
 
-    /**
-     * Checks whether the stream is closed.
-     *
-     * @throws IOException if an I/O error occurs.
-     */
     protected void checkStream() throws IOException {
         if (closed) {
             throw new IOException("Stream closed");
diff --git a/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
index c7399dd..a962215 100644
--- a/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
@@ -192,13 +192,7 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
     /**
      * Does the decryption using inBuffer as input and outBuffer as output. Upon
      * return, inBuffer is cleared; the decrypted data starts at
-     * outBuffer.position() and ends at outBuffer.limit().
-     *
-     * @param state the CipherState instance.
-     * @param inBuffer the input buffer.
-     * @param outBuffer the output buffer.
-     * @param padding the padding.
-     * @throws IOException if an I/O error occurs.
+     * outBuffer.position() and ends at outBuffer.limit()
      */
     private void decrypt(CipherState state, ByteBuffer inBuffer,
             ByteBuffer outBuffer, byte padding) throws IOException {
@@ -221,14 +215,6 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
         }
     }
 
-    /**
-     * Does the decryption using inBuffer as input and outBuffer as output.
-     *
-     * @param state the CipherState instance.
-     * @param inBuffer the input buffer.
-     * @param outBuffer the output buffer.
-     * @throws IOException if an I/O error occurs.
-     */
     private void decryptBuffer(CipherState state, ByteBuffer inBuffer,
             ByteBuffer outBuffer) throws IOException {
         int inputSize = inBuffer.remaining();
@@ -255,13 +241,6 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
     /**
      * This method is executed immediately after decryption. Check whether
      * cipher should be updated and recalculate padding if needed.
-     *
-     * @param state the CipherState instance.
-     * @param inBuffer the input buffer.
-     * @param position the offset from the start of the stream.
-     * @param iv the iv.
-     * @return the padding.
-     * @throws IOException if an I/O error occurs.
      */
     private byte postDecryption(CipherState state, ByteBuffer inBuffer,
             long position, byte[] iv) throws IOException {
@@ -280,14 +259,7 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
         return padding;
     }
 
-    /**
-     * Calculates the counter and iv, reset the cipher.
-     *
-     * @param state the CipherState instance.
-     * @param position the offset from the start of the stream.
-     * @param iv the iv.
-     * @throws IOException if an I/O error occurs.
-     */
+    /** Calculate the counter and iv, reset the cipher. */
     private void resetCipher(CipherState state, long position, byte[] iv)
             throws IOException {
         final long counter = getCounter(position);
@@ -303,12 +275,7 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
         state.reset(false);
     }
 
-    /**
-     * Gets CryptoCipher from pool.
-     *
-     * @return the CipherState instance.
-     * @throws IOException if an I/O error occurs.
-     */
+    /** Get CryptoCipher from pool */
     private CipherState getCipherState() throws IOException {
         CipherState state = cipherPool.poll();
         if (state == null) {
@@ -325,22 +292,14 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
         return state;
     }
 
-    /**
-     * Returns CryptoCipher to pool.
-     *
-     * @param state the CipherState instance.
-     */
+    /** Return CryptoCipher to pool */
     private void returnCipherState(CipherState state) {
         if (state != null) {
             cipherPool.add(state);
         }
     }
 
-    /**
-     * Gets direct buffer from pool.
-     *
-     * @return the buffer.
-     */
+    /** Get direct buffer from pool */
     private ByteBuffer getBuffer() {
         ByteBuffer buffer = bufferPool.poll();
         if (buffer == null) {
@@ -350,11 +309,7 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
         return buffer;
     }
 
-    /**
-     * Returns direct buffer to pool.
-     *
-     * @param buf the buffer.
-     */
+    /** Return direct buffer to pool */
     private void returnBuffer(ByteBuffer buf) {
         if (buf != null) {
             buf.clear();
@@ -390,39 +345,19 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
         private CryptoCipher cipher;
         private boolean reset;
 
-        /**
-         * The constructor of {@Link CipherState}.
-         *
-         * @param cipher the CryptoCipher instance.
-         */
         public CipherState(CryptoCipher cipher) {
             this.cipher = cipher;
             this.reset = false;
         }
 
-        /**
-         * Gets the CryptoCipher instance.
-         *
-         * @return the cipher.
-         */
         public CryptoCipher getCipher() {
             return cipher;
         }
 
-        /**
-         * Gets the reset.
-         *
-         * @return the value of reset.
-         */
         public boolean isReset() {
             return reset;
         }
 
-        /**
-         * Sets the value of reset.
-         *
-         * @param reset the reset.
-         */
         public void reset(boolean reset) {
             this.reset = reset;
         }
diff --git a/src/main/java/org/apache/commons/crypto/stream/input/ChannelInput.java b/src/main/java/org/apache/commons/crypto/stream/input/ChannelInput.java
index d85dba1..dbcba57 100644
--- a/src/main/java/org/apache/commons/crypto/stream/input/ChannelInput.java
+++ b/src/main/java/org/apache/commons/crypto/stream/input/ChannelInput.java
@@ -161,11 +161,6 @@ public class ChannelInput implements Input {
         channel.close();
     }
 
-    /**
-     * Gets the skip buffer.
-     *
-     * @return the buffer.
-     */
     private ByteBuffer getSkipBuf() {
         if (buf == null) {
             buf = ByteBuffer.allocate(SKIP_BUFFER_SIZE);
diff --git a/src/main/java/org/apache/commons/crypto/stream/output/StreamOutput.java b/src/main/java/org/apache/commons/crypto/stream/output/StreamOutput.java
index e76c11c..78c9bab 100644
--- a/src/main/java/org/apache/commons/crypto/stream/output/StreamOutput.java
+++ b/src/main/java/org/apache/commons/crypto/stream/output/StreamOutput.java
@@ -92,11 +92,6 @@ public class StreamOutput implements Output {
         out.close();
     }
 
-    /**
-     * Gets the output stream.
-     *
-     * @return the output stream.
-     */
     protected OutputStream getOut() {
         return out;
     }
diff --git a/src/main/java/org/apache/commons/crypto/utils/IOUtils.java b/src/main/java/org/apache/commons/crypto/utils/IOUtils.java
index a766613..d414716 100644
--- a/src/main/java/org/apache/commons/crypto/utils/IOUtils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/IOUtils.java
@@ -28,9 +28,6 @@ import org.apache.commons.logging.Log;
  */
 public final class IOUtils {
 
-    /**
-     * Teh private constructor of {@Link IOUtils}.
-     */
     private IOUtils() {
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java b/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
index 2068828..1813745 100644
--- a/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
+++ b/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
@@ -40,9 +40,7 @@ public final class NativeCodeLoader {
     private static final Log LOG = LogFactory.getLog(NativeCodeLoader.class);
 
     private final static boolean nativeCodeLoaded;
-    /**
-     * The private constructor of {@Link NativeCodeLoader}.
-     */
+
     private NativeCodeLoader() {
     }
 
@@ -80,11 +78,6 @@ public final class NativeCodeLoader {
         }
     }
 
-    /**
-     * Finds the native library.
-     *
-     * @return the jar file.
-     */
     static File findNativeLibrary() {
         // Try to load the library in commons-crypto.lib.path */
         String nativeLibraryPath = Utils.getLibPath();
@@ -255,14 +248,6 @@ public final class NativeCodeLoader {
         return version;
     }
 
-    /**
-     * Checks whether in1 and in2 is equal.
-     *
-     * @param in1 the input1.
-     * @param in2 the input2.
-     * @return true if in1 and in2 is equal, else false.
-     * @throws IOException if an I/O error occurs.
-     */
     private static boolean contentsEquals(InputStream in1, InputStream in2)
             throws IOException {
         if (!(in1 instanceof BufferedInputStream)) {
@@ -284,12 +269,6 @@ public final class NativeCodeLoader {
         return ch2 == -1;
     }
 
-    /**
-     * Checks whether the given path has resource.
-     *
-     * @param path the path.
-     * @return the boolean.
-     */
     private static boolean hasResource(String path) {
         return NativeCodeLoader.class.getResource(path) != null;
     }
diff --git a/src/main/java/org/apache/commons/crypto/utils/OSInfo.java b/src/main/java/org/apache/commons/crypto/utils/OSInfo.java
index f4c31fb..21f2fe3 100644
--- a/src/main/java/org/apache/commons/crypto/utils/OSInfo.java
+++ b/src/main/java/org/apache/commons/crypto/utils/OSInfo.java
@@ -63,9 +63,6 @@ public class OSInfo {
      */
     public static final String PPC64 = "ppc64";
 
-    /**
-     * The private constructor of {@Link OSInfo}.
-     */
     private OSInfo() {
     }
 
@@ -107,11 +104,6 @@ public class OSInfo {
         archMapping.put("power_rs64", PPC64);
     }
 
-    /**
-     * The main method.
-     *
-     * @param args the argv.
-     */
     public static void main(String[] args) {
         if (args.length >= 1) {
             if ("--os".equals(args[0])) {
diff --git a/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java b/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java
index 014e7b1..81e0aa6 100644
--- a/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java
@@ -46,9 +46,6 @@ public final class ReflectionUtils {
      */
     private static final Class<?> NEGATIVE_CACHE_SENTINEL = NegativeCacheSentinel.class;
 
-    /**
-     * The private constructor of {@Link ReflectionUtils}.
-     */
     private ReflectionUtils() {
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/utils/Utils.java b/src/main/java/org/apache/commons/crypto/utils/Utils.java
index a36f215..f3a82e9 100644
--- a/src/main/java/org/apache/commons/crypto/utils/Utils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/Utils.java
@@ -59,9 +59,6 @@ public final class Utils {
     private static final int AES_BLOCK_SIZE = CipherTransformation.AES_CTR_NOPADDING
             .getAlgorithmBlockSize();
 
-    /**
-     * The private constructor of {@Link Utils}.
-     */
     private Utils() {
     }
 
