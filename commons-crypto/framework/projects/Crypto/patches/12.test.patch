diff --git a/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java b/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java
index f60f29c..67ab5c0 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java
@@ -48,7 +48,7 @@ public abstract class AbstractCipherTest {
       0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16};
   static final byte[] IV = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
       0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
-  CryptoCipher enc, dec;
+  Cipher enc, dec;
 
   @Before
   public void setup() {
@@ -96,19 +96,19 @@ public abstract class AbstractCipherTest {
       GeneralSecurityException, IOException {
     ByteBuffer decResult = ByteBuffer.allocateDirect(BYTEBUFFER_SIZE);
     ByteBuffer encResult = ByteBuffer.allocateDirect(BYTEBUFFER_SIZE);
-    CryptoCipher enc, dec;
+    Cipher enc, dec;
 
     enc = getCipher(transformation);
     dec = getCipher(transformation);
 
     try {
-      enc.init(CryptoCipher.ENCRYPT_MODE, new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
+      enc.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
     } catch (Exception e) {
       Assert.fail("AES failed initialisation - " + e.toString());
     }
 
     try {
-      dec.init(CryptoCipher.DECRYPT_MODE, new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
+      dec.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
     } catch (Exception e) {
       Assert.fail("AES failed initialisation - " + e.toString());
     }
@@ -219,21 +219,21 @@ public abstract class AbstractCipherTest {
     dec = getCipher(transformation);
 
     try {
-      enc.init(CryptoCipher.ENCRYPT_MODE, new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
+      enc.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
     } catch (Exception e) {
       Assert.fail("AES failed initialisation - " + e.toString());
     }
 
     try {
-      dec.init(CryptoCipher.DECRYPT_MODE, new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
+      dec.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
     } catch (Exception e) {
       Assert.fail("AES failed initialisation - " + e.toString());
     }
   }
 
-  private CryptoCipher getCipher(CipherTransformation transformation) {
+  private Cipher getCipher(CipherTransformation transformation) {
     try {
-      return (CryptoCipher) ReflectionUtils
+      return (Cipher) ReflectionUtils
           .newInstance(ReflectionUtils.getClassByName(cipherClass), props,
               transformation);
     } catch (ClassNotFoundException e) {
diff --git a/src/test/java/org/apache/commons/crypto/cipher/CryptoCipherFactoryTest.java b/src/test/java/org/apache/commons/crypto/cipher/CipherFactoryTest.java
similarity index 89%
rename from src/test/java/org/apache/commons/crypto/cipher/CryptoCipherFactoryTest.java
rename to src/test/java/org/apache/commons/crypto/cipher/CipherFactoryTest.java
index 3653cf9..cd995df 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/CryptoCipherFactoryTest.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/CipherFactoryTest.java
@@ -25,10 +25,10 @@ import org.apache.commons.crypto.conf.ConfigurationKeys;
 import junit.framework.Assert;
 import org.junit.Test;
 
-public class CryptoCipherFactoryTest {
+public class CipherFactoryTest {
   @Test
   public void testDefaultCipher() throws GeneralSecurityException {
-    CryptoCipher defaultCipher = CryptoCipherFactory.getInstance(
+    Cipher defaultCipher = CipherFactory.getInstance(
         CipherTransformation.AES_CBC_NOPADDING);
     Assert.assertEquals(OpensslCipher.class.getName(),
         defaultCipher.getClass().getName());
@@ -38,7 +38,7 @@ public class CryptoCipherFactoryTest {
   public void testEmptyCipher() throws GeneralSecurityException {
     Properties properties = new Properties();
     properties.put(ConfigurationKeys.COMMONS_CRYPTO_CIPHER_CLASSES_KEY, "");
-    CryptoCipher defaultCipher = CryptoCipherFactory.getInstance(
+    Cipher defaultCipher = CipherFactory.getInstance(
         CipherTransformation.AES_CBC_NOPADDING, properties);
     Assert.assertEquals(OpensslCipher.class.getName(),
         defaultCipher.getClass().getName());
@@ -49,7 +49,7 @@ public class CryptoCipherFactoryTest {
     Properties properties = new Properties();
     properties.put(ConfigurationKeys.COMMONS_CRYPTO_CIPHER_CLASSES_KEY,
         "InvalidCipherName");
-    CryptoCipher defaultCipher = CryptoCipherFactory.getInstance(
+    Cipher defaultCipher = CipherFactory.getInstance(
         CipherTransformation.AES_CBC_NOPADDING, properties);
     Assert.assertEquals(JceCipher.class.getName(),
         defaultCipher.getClass().getName());
diff --git a/src/test/java/org/apache/commons/crypto/random/AbstractRandomTest.java b/src/test/java/org/apache/commons/crypto/random/AbstractRandomTest.java
index 1d1db88..d2919ea 100644
--- a/src/test/java/org/apache/commons/crypto/random/AbstractRandomTest.java
+++ b/src/test/java/org/apache/commons/crypto/random/AbstractRandomTest.java
@@ -24,11 +24,11 @@ import org.junit.Test;
 
 public abstract class AbstractRandomTest {
 
-  public abstract CryptoRandom getCryptoRandom() throws GeneralSecurityException;
+  public abstract SecureRandom getSecureRandom() throws GeneralSecurityException;
 
   @Test(timeout=120000)
   public void testRandomBytes() throws Exception {
-    CryptoRandom random = getCryptoRandom();
+    SecureRandom random = getSecureRandom();
     // len = 16
     checkRandomBytes(random, 16);
     // len = 32
@@ -44,7 +44,7 @@ public abstract class AbstractRandomTest {
    * Test will timeout if secure random implementation always returns a
    * constant value.
    */
-  private void checkRandomBytes(CryptoRandom random, int len) {
+  private void checkRandomBytes(SecureRandom random, int len) {
     byte[] bytes = new byte[len];
     byte[] bytes1 = new byte[len];
     random.nextBytes(bytes);
diff --git a/src/test/java/org/apache/commons/crypto/random/TestJavaCryptoRandom.java b/src/test/java/org/apache/commons/crypto/random/TestJavaSecureRandom.java
similarity index 77%
rename from src/test/java/org/apache/commons/crypto/random/TestJavaCryptoRandom.java
rename to src/test/java/org/apache/commons/crypto/random/TestJavaSecureRandom.java
index bb84bc7..2bbed66 100644
--- a/src/test/java/org/apache/commons/crypto/random/TestJavaCryptoRandom.java
+++ b/src/test/java/org/apache/commons/crypto/random/TestJavaSecureRandom.java
@@ -23,18 +23,18 @@ import java.util.Properties;
 import org.apache.commons.crypto.conf.ConfigurationKeys;
 import static junit.framework.Assert.fail;
 
-public class TestJavaCryptoRandom extends AbstractRandomTest {
+public class TestJavaSecureRandom extends AbstractRandomTest {
 
   @Override
-  public CryptoRandom getCryptoRandom() throws GeneralSecurityException {
+  public SecureRandom getSecureRandom() throws GeneralSecurityException {
     Properties props = new Properties();
     props.setProperty(ConfigurationKeys.COMMONS_CRYPTO_SECURE_RANDOM_CLASSES_KEY,
-        JavaCryptoRandom.class.getName());
-    CryptoRandom random = CryptoRandomFactory.getCryptoRandom(props);
-    if ( !(random instanceof JavaCryptoRandom)) {
-      fail("The CryptoRandom should be: " + JavaCryptoRandom.class.getName());
+        JavaSecureRandom.class.getName());
+    SecureRandom random = SecureRandomFactory.getSecureRandom(props);
+    if ( !(random instanceof JavaSecureRandom)) {
+      fail("The SecureRandom should be: " + JavaSecureRandom.class.getName());
     }
     return random;
   }
 
-}
+}
\ No newline at end of file
diff --git a/src/test/java/org/apache/commons/crypto/random/TestOpensslCryptoRandom.java b/src/test/java/org/apache/commons/crypto/random/TestOpensslSecureRandom.java
similarity index 77%
rename from src/test/java/org/apache/commons/crypto/random/TestOpensslCryptoRandom.java
rename to src/test/java/org/apache/commons/crypto/random/TestOpensslSecureRandom.java
index fede249..13224dd 100644
--- a/src/test/java/org/apache/commons/crypto/random/TestOpensslCryptoRandom.java
+++ b/src/test/java/org/apache/commons/crypto/random/TestOpensslSecureRandom.java
@@ -23,18 +23,18 @@ import java.util.Properties;
 import org.apache.commons.crypto.conf.ConfigurationKeys;
 import static junit.framework.Assert.fail;
 
-public class TestOpensslCryptoRandom extends AbstractRandomTest {
+public class TestOpensslSecureRandom extends AbstractRandomTest {
 
   @Override
-  public CryptoRandom getCryptoRandom() throws GeneralSecurityException {
+  public SecureRandom getSecureRandom() throws GeneralSecurityException {
     Properties props = new Properties();
     props.setProperty(ConfigurationKeys.COMMONS_CRYPTO_SECURE_RANDOM_CLASSES_KEY,
-        OpensslCryptoRandom.class.getName());
-    CryptoRandom random = CryptoRandomFactory.getCryptoRandom(props);
-    if ( !(random instanceof OpensslCryptoRandom)) {
-      fail("The CryptoRandom should be: " + OpensslCryptoRandom.class.getName());
+        OpensslSecureRandom.class.getName());
+    SecureRandom random = SecureRandomFactory.getSecureRandom(props);
+    if ( !(random instanceof OpensslSecureRandom)) {
+      fail("The SecureRandom should be: " + OpensslSecureRandom.class.getName());
     }
     return random;
   }
 
-}
+}
\ No newline at end of file
diff --git a/src/test/java/org/apache/commons/crypto/random/TestOsCryptoRandom.java b/src/test/java/org/apache/commons/crypto/random/TestOsSecureRandom.java
similarity index 85%
rename from src/test/java/org/apache/commons/crypto/random/TestOsCryptoRandom.java
rename to src/test/java/org/apache/commons/crypto/random/TestOsSecureRandom.java
index 9968c34..de88511 100644
--- a/src/test/java/org/apache/commons/crypto/random/TestOsCryptoRandom.java
+++ b/src/test/java/org/apache/commons/crypto/random/TestOsSecureRandom.java
@@ -19,10 +19,10 @@ package org.apache.commons.crypto.random;
 
 import java.util.Properties;
 
-public class TestOsCryptoRandom extends AbstractRandomTest{
+public class TestOsSecureRandom extends AbstractRandomTest{
 
   @Override
-  public CryptoRandom getCryptoRandom() {
-    return new OsCryptoRandom(new Properties());
+  public SecureRandom getSecureRandom() {
+    return new OsSecureRandom(new Properties());
   }
 }
diff --git a/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java b/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java
index a89e4d1..40b1487 100644
--- a/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java
+++ b/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java
@@ -31,8 +31,11 @@ import java.security.SecureRandom;
 import java.util.Properties;
 import java.util.Random;
 
-import org.apache.commons.crypto.cipher.*;
-import org.apache.commons.crypto.cipher.CryptoCipher;
+import org.apache.commons.crypto.cipher.Cipher;
+import org.apache.commons.crypto.cipher.CipherTransformation;
+import org.apache.commons.crypto.cipher.JceCipher;
+import org.apache.commons.crypto.cipher.Openssl;
+import org.apache.commons.crypto.cipher.OpensslCipher;
 import org.apache.commons.crypto.utils.ReflectionUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -104,7 +107,7 @@ public abstract class AbstractCipherStreamTest {
   }
 
   private void doSkipTest(String cipherClass, boolean withChannel) throws IOException {
-    InputStream in = getCryptoInputStream(new ByteArrayInputStream(encData),
+    InputStream in = getCipherInputStream(new ByteArrayInputStream(encData),
         getCipher(cipherClass), defaultBufferSize, iv, withChannel);
     byte[] result = new byte[dataLen];
     int n1 = readAll(in, result, 0, dataLen / 3);
@@ -135,56 +138,56 @@ public abstract class AbstractCipherStreamTest {
 
   private void doByteBufferRead(String cipherClass, boolean withChannel) throws Exception {
     // Default buffer size, initial buffer position is 0
-    InputStream in = getCryptoInputStream(new ByteArrayInputStream(encData),
+    InputStream in = getCipherInputStream(new ByteArrayInputStream(encData),
         getCipher(cipherClass), defaultBufferSize, iv, withChannel);
     ByteBuffer buf = ByteBuffer.allocate(dataLen + 100);
     byteBufferReadCheck(in, buf, 0);
     in.close();
 
     // Default buffer size, initial buffer position is not 0
-    in = getCryptoInputStream(new ByteArrayInputStream(encData),
+    in = getCipherInputStream(new ByteArrayInputStream(encData),
         getCipher(cipherClass), defaultBufferSize, iv, withChannel);
     buf.clear();
     byteBufferReadCheck(in, buf, 11);
     in.close();
 
     // Small buffer size, initial buffer position is 0
-    in = getCryptoInputStream(new ByteArrayInputStream(encData),
+    in = getCipherInputStream(new ByteArrayInputStream(encData),
         getCipher(cipherClass), smallBufferSize, iv, withChannel);
     buf.clear();
     byteBufferReadCheck(in, buf, 0);
     in.close();
 
     // Small buffer size, initial buffer position is not 0
-    in = getCryptoInputStream(new ByteArrayInputStream(encData),
+    in = getCipherInputStream(new ByteArrayInputStream(encData),
         getCipher(cipherClass), smallBufferSize, iv, withChannel);
     buf.clear();
     byteBufferReadCheck(in, buf, 11);
     in.close();
 
     // Direct buffer, default buffer size, initial buffer position is 0
-    in = getCryptoInputStream(new ByteArrayInputStream(encData),
+    in = getCipherInputStream(new ByteArrayInputStream(encData),
         getCipher(cipherClass), defaultBufferSize, iv, withChannel);
     buf = ByteBuffer.allocateDirect(dataLen + 100);
     byteBufferReadCheck(in, buf, 0);
     in.close();
 
     // Direct buffer, default buffer size, initial buffer position is not 0
-    in = getCryptoInputStream(new ByteArrayInputStream(encData),
+    in = getCipherInputStream(new ByteArrayInputStream(encData),
         getCipher(cipherClass), defaultBufferSize, iv, withChannel);
     buf.clear();
     byteBufferReadCheck(in, buf, 11);
     in.close();
 
     // Direct buffer, small buffer size, initial buffer position is 0
-    in = getCryptoInputStream(new ByteArrayInputStream(encData),
+    in = getCipherInputStream(new ByteArrayInputStream(encData),
         getCipher(cipherClass), smallBufferSize, iv, withChannel);
     buf.clear();
     byteBufferReadCheck(in, buf, 0);
     in.close();
 
     // Direct buffer, small buffer size, initial buffer position is not 0
-    in = getCryptoInputStream(new ByteArrayInputStream(encData),
+    in = getCipherInputStream(new ByteArrayInputStream(encData),
         getCipher(cipherClass), smallBufferSize, iv, withChannel);
     buf.clear();
     byteBufferReadCheck(in, buf, 11);
@@ -195,8 +198,8 @@ public abstract class AbstractCipherStreamTest {
                                  boolean withChannel)
       throws Exception {
     baos.reset();
-    CryptoOutputStream out =
-        getCryptoOutputStream(baos, getCipher(cipherClass), defaultBufferSize,
+    CipherOutputStream out =
+        getCipherOutputStream(baos, getCipher(cipherClass), defaultBufferSize,
             iv, withChannel);
     ByteBuffer buf = ByteBuffer.allocateDirect(dataLen / 2);
     buf.put(data, 0, dataLen / 2);
@@ -217,7 +220,7 @@ public abstract class AbstractCipherStreamTest {
 
     out.flush();
 
-    InputStream in = getCryptoInputStream(new ByteArrayInputStream(encData),
+    InputStream in = getCipherInputStream(new ByteArrayInputStream(encData),
         getCipher(cipherClass), defaultBufferSize, iv, withChannel);
     buf = ByteBuffer.allocate(dataLen + 100);
     byteBufferReadCheck(in, buf, 0);
@@ -239,16 +242,16 @@ public abstract class AbstractCipherStreamTest {
   }
 
   private void prepareData() throws IOException {
-    CryptoCipher cipher = null;
+    Cipher cipher = null;
     try {
-      cipher = (CryptoCipher)ReflectionUtils.newInstance(
+      cipher = (Cipher)ReflectionUtils.newInstance(
           ReflectionUtils.getClassByName(jceCipherClass), props, transformation);
     } catch (ClassNotFoundException cnfe) {
       throw new IOException("Illegal crypto cipher!");
     }
 
     ByteArrayOutputStream baos = new ByteArrayOutputStream();
-    OutputStream out = new CryptoOutputStream(baos, cipher, defaultBufferSize,
+    OutputStream out = new CipherOutputStream(baos, cipher, defaultBufferSize,
             new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
     out.write(data);
     out.flush();
@@ -256,30 +259,30 @@ public abstract class AbstractCipherStreamTest {
     encData = baos.toByteArray();
   }
 
-  protected CryptoInputStream getCryptoInputStream(ByteArrayInputStream bais,
-                                                   CryptoCipher cipher,
+  protected CipherInputStream getCipherInputStream(ByteArrayInputStream bais,
+                                                   Cipher cipher,
                                                    int bufferSize, byte[] iv,
                                                    boolean withChannel) throws
       IOException {
     if (withChannel) {
-      return new CryptoInputStream(Channels.newChannel(bais), cipher,
+      return new CipherInputStream(Channels.newChannel(bais), cipher,
           bufferSize, new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
     } else {
-      return new CryptoInputStream(bais, cipher, bufferSize,
+      return new CipherInputStream(bais, cipher, bufferSize,
               new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
     }
   }
 
-  protected CryptoOutputStream getCryptoOutputStream(ByteArrayOutputStream baos,
-                                                     CryptoCipher cipher,
+  protected CipherOutputStream getCipherOutputStream(ByteArrayOutputStream baos,
+                                                     Cipher cipher,
                                                      int bufferSize, byte[] iv,
                                                      boolean withChannel) throws
       IOException {
     if (withChannel) {
-      return new CryptoOutputStream(Channels.newChannel(baos), cipher,
+      return new CipherOutputStream(Channels.newChannel(baos), cipher,
           bufferSize, new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
     } else {
-      return new CryptoOutputStream(baos, cipher, bufferSize,
+      return new CipherOutputStream(baos, cipher, bufferSize,
               new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
     }
   }
@@ -299,9 +302,9 @@ public abstract class AbstractCipherStreamTest {
     return total;
   }
 
-  protected CryptoCipher getCipher(String cipherClass) throws IOException {
+  protected Cipher getCipher(String cipherClass) throws IOException {
     try {
-      return (CryptoCipher)ReflectionUtils.newInstance(
+      return (Cipher)ReflectionUtils.newInstance(
           ReflectionUtils.getClassByName(cipherClass), props, transformation);
     } catch (ClassNotFoundException cnfe) {
       throw new IOException("Illegal crypto cipher!");
@@ -336,7 +339,7 @@ public abstract class AbstractCipherStreamTest {
 
   private void doReadWriteTestForInputStream(int count, String encCipherClass,
                                              String decCipherClass, byte[] iv) throws IOException {
-    CryptoCipher encCipher = getCipher(encCipherClass);
+    Cipher encCipher = getCipher(encCipherClass);
     LOG.debug("Created a cipher object of type: " + encCipherClass);
 
     // Generate data
@@ -348,19 +351,19 @@ public abstract class AbstractCipherStreamTest {
 
     // Encrypt data
     ByteArrayOutputStream encryptedData = new ByteArrayOutputStream();
-    CryptoOutputStream out =
-        getCryptoOutputStream(encryptedData, encCipher, defaultBufferSize, iv,
+    CipherOutputStream out =
+        getCipherOutputStream(encryptedData, encCipher, defaultBufferSize, iv,
             false);
     out.write(originalData, 0, originalData.length);
     out.flush();
     out.close();
     LOG.debug("Finished encrypting data");
 
-    CryptoCipher decCipher = getCipher(decCipherClass);
+    Cipher decCipher = getCipher(decCipherClass);
     LOG.debug("Created a cipher object of type: " + decCipherClass);
 
     // Decrypt data
-    CryptoInputStream in = getCryptoInputStream(
+    CipherInputStream in = getCipherInputStream(
         new ByteArrayInputStream(encryptedData.toByteArray()), decCipher,
         defaultBufferSize, iv, false);
 
@@ -379,7 +382,7 @@ public abstract class AbstractCipherStreamTest {
         originalData, decryptedData);
 
     // Decrypt data byte-at-a-time
-    in = getCryptoInputStream(
+    in = getCipherInputStream(
         new ByteArrayInputStream(encryptedData.toByteArray()), decCipher,
         defaultBufferSize, iv, false);
 
@@ -399,7 +402,7 @@ public abstract class AbstractCipherStreamTest {
                                                      String encCipherClass,
                                                      String decCipherClass,
                                                      byte[] iv) throws IOException {
-    CryptoCipher encCipher = getCipher(encCipherClass);
+    Cipher encCipher = getCipher(encCipherClass);
     LOG.debug("Created a cipher object of type: " + encCipherClass);
 
     // Generate data
@@ -411,19 +414,19 @@ public abstract class AbstractCipherStreamTest {
 
     // Encrypt data
     ByteArrayOutputStream encryptedData = new ByteArrayOutputStream();
-    CryptoOutputStream out =
-        getCryptoOutputStream(encryptedData, encCipher, defaultBufferSize, iv,
+    CipherOutputStream out =
+        getCipherOutputStream(encryptedData, encCipher, defaultBufferSize, iv,
             true);
     out.write(originalData, 0, originalData.length);
     out.flush();
     out.close();
     LOG.debug("Finished encrypting data");
 
-    CryptoCipher decCipher = getCipher(decCipherClass);
+    Cipher decCipher = getCipher(decCipherClass);
     LOG.debug("Created a cipher object of type: " + decCipherClass);
 
     // Decrypt data
-    CryptoInputStream in = getCryptoInputStream(
+    CipherInputStream in = getCipherInputStream(
         new ByteArrayInputStream(encryptedData.toByteArray()), decCipher,
         defaultBufferSize, iv, true);
 
@@ -442,7 +445,7 @@ public abstract class AbstractCipherStreamTest {
         originalData, decryptedData);
 
     // Decrypt data byte-at-a-time
-    in = getCryptoInputStream(new ByteArrayInputStream(
+    in = getCipherInputStream(new ByteArrayInputStream(
         encryptedData.toByteArray()),decCipher,defaultBufferSize,iv,true);
 
     // Check
diff --git a/src/test/java/org/apache/commons/crypto/stream/CTRCryptoStreamTest.java b/src/test/java/org/apache/commons/crypto/stream/CTRCipherStreamTest.java
similarity index 68%
rename from src/test/java/org/apache/commons/crypto/stream/CTRCryptoStreamTest.java
rename to src/test/java/org/apache/commons/crypto/stream/CTRCipherStreamTest.java
index 0953196..6f9b5f1 100644
--- a/src/test/java/org/apache/commons/crypto/stream/CTRCryptoStreamTest.java
+++ b/src/test/java/org/apache/commons/crypto/stream/CTRCipherStreamTest.java
@@ -22,10 +22,10 @@ import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.nio.channels.Channels;
 
-import org.apache.commons.crypto.cipher.CryptoCipher;
+import org.apache.commons.crypto.cipher.Cipher;
 import org.apache.commons.crypto.cipher.CipherTransformation;
 
-public class CTRCryptoStreamTest extends AbstractCipherStreamTest {
+public class CTRCipherStreamTest extends AbstractCipherStreamTest {
 
   @Override
 public void setUp() throws IOException {
@@ -34,26 +34,26 @@ public void setUp() throws IOException {
   }
 
   @Override
-  protected CTRCryptoInputStream getCryptoInputStream
-      (ByteArrayInputStream bais, CryptoCipher cipher, int
-      bufferSize, byte[] iv, boolean withChannel)
+  protected CTRCipherInputStream getCipherInputStream
+      (ByteArrayInputStream bais, Cipher cipher, int
+      bufferSize,byte[] iv, boolean withChannel)
       throws IOException {
     if (withChannel) {
-      return new CTRCryptoInputStream(Channels.newChannel(bais), cipher,
+      return new CTRCipherInputStream(Channels.newChannel(bais), cipher,
           bufferSize, key, iv);
     } else {
-      return new CTRCryptoInputStream(bais, cipher, bufferSize, key, iv);
+      return new CTRCipherInputStream(bais, cipher, bufferSize, key, iv);
     }
   }
 
   @Override
-  protected CTRCryptoOutputStream getCryptoOutputStream(ByteArrayOutputStream baos, CryptoCipher cipher,
-                                                        int bufferSize, byte[] iv, boolean withChannel)
+  protected CTRCipherOutputStream getCipherOutputStream(ByteArrayOutputStream baos, Cipher cipher, int
+      bufferSize, byte[] iv, boolean withChannel)
       throws IOException {
     if (withChannel) {
-      return new CTRCryptoOutputStream(Channels.newChannel(baos), cipher, bufferSize, key, iv);
+      return new CTRCipherOutputStream(Channels.newChannel(baos), cipher, bufferSize, key, iv);
     } else {
-      return new CTRCryptoOutputStream(baos, cipher, bufferSize, key, iv);
+      return new CTRCipherOutputStream(baos, cipher, bufferSize, key, iv);
     }
   }
 }
diff --git a/src/test/java/org/apache/commons/crypto/stream/PositionedCryptoInputStreamTest.java b/src/test/java/org/apache/commons/crypto/stream/PositionedCipherInputStreamTest.java
similarity index 92%
rename from src/test/java/org/apache/commons/crypto/stream/PositionedCryptoInputStreamTest.java
rename to src/test/java/org/apache/commons/crypto/stream/PositionedCipherInputStreamTest.java
index 2591bd9..35bbf7a 100644
--- a/src/test/java/org/apache/commons/crypto/stream/PositionedCryptoInputStreamTest.java
+++ b/src/test/java/org/apache/commons/crypto/stream/PositionedCipherInputStreamTest.java
@@ -18,7 +18,7 @@
 
 package org.apache.commons.crypto.stream;
 
-import org.apache.commons.crypto.cipher.CryptoCipher;
+import org.apache.commons.crypto.cipher.Cipher;
 import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.cipher.JceCipher;
 import org.apache.commons.crypto.cipher.OpensslCipher;
@@ -39,7 +39,7 @@ import java.util.Arrays;
 import java.util.Properties;
 import java.util.Random;
 
-public class PositionedCryptoInputStreamTest {
+public class PositionedCipherInputStreamTest {
 
   private final int dataLen = 20000;
   private byte[] testData = new byte[dataLen];
@@ -69,9 +69,9 @@ public class PositionedCryptoInputStreamTest {
   }
 
   private void prepareData() throws IOException {
-    CryptoCipher cipher = null;
+    Cipher cipher = null;
     try {
-      cipher = (CryptoCipher)ReflectionUtils.newInstance(
+      cipher = (Cipher)ReflectionUtils.newInstance(
               ReflectionUtils.getClassByName(jceCipherClass),
               props, transformation);
     } catch (ClassNotFoundException cnfe) {
@@ -80,7 +80,7 @@ public class PositionedCryptoInputStreamTest {
 
     ByteArrayOutputStream baos = new ByteArrayOutputStream();
     // encryption data
-    OutputStream out = new CryptoOutputStream(baos, cipher, bufferSize,
+    OutputStream out = new CipherOutputStream(baos, cipher, bufferSize,
             new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
     out.write(testData);
     out.flush();
@@ -90,9 +90,9 @@ public class PositionedCryptoInputStreamTest {
 
   public void setUp() throws IOException {}
 
-  private PositionedCryptoInputStream getCryptoInputStream(CryptoCipher cipher,
+  private PositionedCipherInputStream getCipherInputStream(Cipher cipher,
                                                            int bufferSize) throws IOException {
-    return new PositionedCryptoInputStream(new PositionedInputForTest(
+    return new PositionedCipherInputStream(new PositionedInputForTest(
       Arrays.copyOf(encData, encData.length)), cipher, bufferSize, key, iv, 0);
   }
 
@@ -112,7 +112,7 @@ public class PositionedCryptoInputStreamTest {
   // when there are multiple positioned read actions and one read action,
   // they will not interfere each other.
   private void doMultipleReadTest(String cipherClass) throws Exception {
-    PositionedCryptoInputStream in = getCryptoInputStream(
+    PositionedCipherInputStream in = getCipherInputStream(
             getCipher(cipherClass), bufferSize);
     int position = 0;
     while (in.available() > 0) {
@@ -187,7 +187,7 @@ public class PositionedCryptoInputStreamTest {
 
   private void testSeekLoop(String cipherClass, int position, int length,
       int bufferSize) throws Exception {
-    PositionedCryptoInputStream in = getCryptoInputStream(
+    PositionedCipherInputStream in = getCipherInputStream(
             getCipher(cipherClass), bufferSize);
     while (in.available() > 0) {
       in.seek(position);
@@ -206,7 +206,7 @@ public class PositionedCryptoInputStreamTest {
   // test for the out of index position, eg, -1.
   private void testSeekFailed(String cipherClass, int position,
       int bufferSize) throws Exception {
-    PositionedCryptoInputStream in = getCryptoInputStream(
+    PositionedCipherInputStream in = getCipherInputStream(
             getCipher(cipherClass), bufferSize);
     try {
       in.seek(position);
@@ -218,7 +218,7 @@ public class PositionedCryptoInputStreamTest {
 
   private void testPositionedReadLoop(String cipherClass, int position,
       int length, int bufferSize, int total) throws Exception {
-    PositionedCryptoInputStream in = getCryptoInputStream(
+    PositionedCipherInputStream in = getCipherInputStream(
             getCipher(cipherClass), bufferSize);
     // do the position read until the end of data
     while (position < total) {
@@ -237,7 +237,7 @@ public class PositionedCryptoInputStreamTest {
   // test for the out of index position, eg, -1.
   private void testPositionedReadNone(String cipherClass, int position,
       int length, int bufferSize) throws Exception {
-    PositionedCryptoInputStream in = getCryptoInputStream(
+    PositionedCipherInputStream in = getCipherInputStream(
             getCipher(cipherClass), bufferSize);
     byte[] bytes = new byte[length];
     int n = in.read(position, bytes, 0, length);
@@ -247,7 +247,7 @@ public class PositionedCryptoInputStreamTest {
 
   private void testReadFullyLoop(String cipherClass,int position,
       int length, int bufferSize, int total) throws Exception {
-    PositionedCryptoInputStream in = getCryptoInputStream(
+    PositionedCipherInputStream in = getCipherInputStream(
             getCipher(cipherClass), bufferSize);
 
     // do the position read full until remain < length
@@ -264,7 +264,7 @@ public class PositionedCryptoInputStreamTest {
   // test for the End of file reached before reading fully
   private void testReadFullyFailed(String cipherClass, int position,
       int length, int bufferSize) throws Exception {
-    PositionedCryptoInputStream in = getCryptoInputStream(
+    PositionedCipherInputStream in = getCipherInputStream(
             getCipher(cipherClass), bufferSize);
     byte[] bytes = new byte[length];
     try {
@@ -287,9 +287,9 @@ public class PositionedCryptoInputStreamTest {
     Assert.assertArrayEquals(expectedData, realData);
   }
 
-  private CryptoCipher getCipher(String cipherClass) throws IOException {
+  private Cipher getCipher(String cipherClass) throws IOException {
     try {
-      return (CryptoCipher)ReflectionUtils.newInstance(
+      return (Cipher)ReflectionUtils.newInstance(
           ReflectionUtils.getClassByName(cipherClass), props, transformation);
     } catch (ClassNotFoundException cnfe) {
       throw new IOException("Illegal crypto cipher!");
