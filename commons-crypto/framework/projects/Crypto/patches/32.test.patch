diff --git a/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java b/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java
index ee69a06..4fb7a8e 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java
@@ -42,7 +42,7 @@ public abstract class AbstractCipherTest {
     public String[] cipherTests = null;
     Properties props = null;
     String cipherClass = null;
-    String[] transformations = null;
+    CipherTransformation[] transformations = null;
 
     // cipher
     static final byte[] KEY = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
@@ -65,7 +65,7 @@ public abstract class AbstractCipherTest {
 
     @Test
     public void cryptoTest() throws GeneralSecurityException {
-        for (String tran : transformations) {
+        for (CipherTransformation tran : transformations) {
             /** uses the small data set in {@link TestData} */
             cipherTests = TestData.getTestData(tran);
             for (int i = 0; i != cipherTests.length; i += 5) {
@@ -97,7 +97,7 @@ public abstract class AbstractCipherTest {
         }
     }
 
-    private void byteBufferTest(String transformation,
+    private void byteBufferTest(CipherTransformation transformation,
             byte[] key, byte[] iv, ByteBuffer input, ByteBuffer output)
             throws GeneralSecurityException {
         ByteBuffer decResult = ByteBuffer.allocateDirect(BYTEBUFFER_SIZE);
@@ -153,11 +153,11 @@ public abstract class AbstractCipherTest {
     }
 
     /** test byte array whose data is planned in {@link TestData} */
-    private void byteArrayTest(String transformation, byte[] key,
+    private void byteArrayTest(CipherTransformation transformation, byte[] key,
             byte[] iv, byte[] input, byte[] output)
             throws GeneralSecurityException {
         resetCipher(transformation, key, iv);
-        int blockSize = enc.getBlockSize();
+        int blockSize = transformation.getAlgorithmBlockSize();
 
         byte[] temp = new byte[input.length + blockSize];
         int n = enc.doFinal(input, 0, input.length, temp, 0);
@@ -175,13 +175,13 @@ public abstract class AbstractCipherTest {
     }
 
     /** test byte array whose data is randomly generated */
-    private void byteArrayTest(String transformation, byte[] key,
+    private void byteArrayTest(CipherTransformation transformation, byte[] key,
             byte[] iv) throws GeneralSecurityException {
-        int blockSize = enc.getBlockSize();
+        int blockSize = transformation.getAlgorithmBlockSize();
 
         // AES_CBC_NOPADDING only accepts data whose size is the multiple of
         // block size
-        int[] dataLenList = (transformation.equals("AES/CBC/NoPadding")) ? new int[] { 10 * 1024 }
+        int[] dataLenList = (transformation == CipherTransformation.AES_CBC_NOPADDING) ? new int[] { 10 * 1024 }
                 : new int[] { 10 * 1024, 10 * 1024 - 3 };
         for (int dataLen : dataLenList) {
             byte[] plainText = new byte[dataLen];
@@ -232,7 +232,7 @@ public abstract class AbstractCipherTest {
         }
     }
 
-    private void resetCipher(String transformation, byte[] key,
+    private void resetCipher(CipherTransformation transformation, byte[] key,
             byte[] iv) {
         enc = getCipher(transformation);
         dec = getCipher(transformation);
@@ -252,7 +252,7 @@ public abstract class AbstractCipherTest {
         }
     }
 
-    private CryptoCipher getCipher(String transformation) {
+    private CryptoCipher getCipher(CipherTransformation transformation) {
         try {
             return (CryptoCipher) ReflectionUtils.newInstance(
                     ReflectionUtils.getClassByName(cipherClass), props,
diff --git a/src/test/java/org/apache/commons/crypto/cipher/CryptoCipherFactoryTest.java b/src/test/java/org/apache/commons/crypto/cipher/CryptoCipherFactoryTest.java
index aeb4be0..a63a458 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/CryptoCipherFactoryTest.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/CryptoCipherFactoryTest.java
@@ -29,7 +29,7 @@ public class CryptoCipherFactoryTest {
     @Test
     public void testDefaultCipher() throws GeneralSecurityException {
         CryptoCipher defaultCipher = CryptoCipherFactory
-                .getInstance("AES/CBC/NoPadding");
+                .getInstance(CipherTransformation.AES_CBC_NOPADDING);
         Assert.assertEquals(OpensslCipher.class.getName(), defaultCipher
                 .getClass().getName());
     }
@@ -40,7 +40,7 @@ public class CryptoCipherFactoryTest {
         properties.setProperty(
                 ConfigurationKeys.COMMONS_CRYPTO_CIPHER_CLASSES_KEY, "");
         CryptoCipher defaultCipher = CryptoCipherFactory.getInstance(
-                "AES/CBC/NoPadding", properties);
+                CipherTransformation.AES_CBC_NOPADDING, properties);
         Assert.assertEquals(OpensslCipher.class.getName(), defaultCipher
                 .getClass().getName());
     }
@@ -51,7 +51,7 @@ public class CryptoCipherFactoryTest {
         properties.setProperty(ConfigurationKeys.COMMONS_CRYPTO_CIPHER_CLASSES_KEY,
                 "InvalidCipherName");
         CryptoCipher defaultCipher = CryptoCipherFactory.getInstance(
-                "AES/CBC/NoPadding", properties);
+                CipherTransformation.AES_CBC_NOPADDING, properties);
         Assert.assertEquals(JceCipher.class.getName(), defaultCipher.getClass()
                 .getName());
     }
@@ -65,6 +65,6 @@ public class CryptoCipherFactoryTest {
         properties.setProperty(ConfigurationKeys
             .COMMONS_CRYPTO_ENABLE_FALLBACK_ON_NATIVE_FAILED_KEY, "false");
 
-        CryptoCipherFactory.getInstance("AES/CBC/NoPadding", properties);
+        CryptoCipherFactory.getInstance(CipherTransformation.AES_CBC_NOPADDING, properties);
     }
 }
diff --git a/src/test/java/org/apache/commons/crypto/cipher/JceCipherTest.java b/src/test/java/org/apache/commons/crypto/cipher/JceCipherTest.java
index 6f72b7c..2f28b16 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/JceCipherTest.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/JceCipherTest.java
@@ -31,10 +31,10 @@ public class JceCipherTest extends AbstractCipherTest {
 
     @Override
     public void init() {
-        transformations = new String[] {
-                "AES/CBC/NoPadding",
-                "AES/CBC/PKCS5Padding",
-                "AES/CTR/NoPadding"};
+        transformations = new CipherTransformation[] {
+                CipherTransformation.AES_CBC_NOPADDING,
+                CipherTransformation.AES_CBC_PKCS5PADDING,
+                CipherTransformation.AES_CTR_NOPADDING };
         cipherClass = JceCipher.class.getName();
     }
 
diff --git a/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java b/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java
index 1150d25..0eaccb3 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java
@@ -33,10 +33,10 @@ public class OpensslCipherTest extends AbstractCipherTest {
 
     @Override
     public void init() {
-        transformations = new String[] {
-                "AES/CBC/NoPadding",
-                "AES/CBC/PKCS5Padding",
-                "AES/CTR/NoPadding"};
+        transformations = new CipherTransformation[] {
+                CipherTransformation.AES_CBC_NOPADDING,
+                CipherTransformation.AES_CBC_PKCS5PADDING,
+                CipherTransformation.AES_CTR_NOPADDING };
         cipherClass = OpensslCipher.class.getName();
     }
 
@@ -85,7 +85,7 @@ public class OpensslCipherTest extends AbstractCipherTest {
     public void testUpdateArguments() throws Exception {
         Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
         Openssl cipher = Openssl
-                .getInstance("AES/CTR/NoPadding");
+                .getInstance(CipherTransformation.AES_CTR_NOPADDING.getName());
         Assert.assertNotNull(cipher);
 
         cipher.init(Openssl.ENCRYPT_MODE, KEY, IV);
@@ -119,7 +119,7 @@ public class OpensslCipherTest extends AbstractCipherTest {
     public void testDoFinalArguments() throws Exception {
         Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
         Openssl cipher = Openssl
-                .getInstance("AES/CTR/NoPadding");
+                .getInstance(CipherTransformation.AES_CTR_NOPADDING.getName());
         Assert.assertNotNull(cipher);
 
         cipher.init(Openssl.ENCRYPT_MODE, KEY, IV);
@@ -140,7 +140,7 @@ public class OpensslCipherTest extends AbstractCipherTest {
     public void testInvalidKey() throws Exception {
         Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
         Openssl cipher = Openssl
-                .getInstance("AES/CTR/NoPadding");
+                .getInstance(CipherTransformation.AES_CTR_NOPADDING.getName());
         Assert.assertNotNull(cipher);
 
         final byte[] invalidKey = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
@@ -158,7 +158,7 @@ public class OpensslCipherTest extends AbstractCipherTest {
     public void testInvalidIV() throws Exception {
         Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
         Openssl cipher = Openssl
-                .getInstance("AES/CTR/NoPadding");
+                .getInstance(CipherTransformation.AES_CTR_NOPADDING.getName());
         Assert.assertNotNull(cipher);
 
         final byte[] invalidIV = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
diff --git a/src/test/java/org/apache/commons/crypto/cipher/TestData.java b/src/test/java/org/apache/commons/crypto/cipher/TestData.java
index a507325..397ecf1 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/TestData.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/TestData.java
@@ -136,16 +136,16 @@ public class TestData {
             "f0f1f2f3f4f5f6f7f8f9fafbfcfdff01",
             "30c81c46a35ce411e5fbc1191a0a52", "2b0930daa23de94ce87017ba2d8498" };
 
-    private static Map<String, String[]> testData = new HashMap<>();
+    private static Map<CipherTransformation, String[]> testData = new HashMap<>();
 
     static {
-        testData.put("AES/CBC/NoPadding", CBCNoPaddingTests);
-        testData.put("AES/CBC/PKCS5Padding",
+        testData.put(CipherTransformation.AES_CBC_NOPADDING, CBCNoPaddingTests);
+        testData.put(CipherTransformation.AES_CBC_PKCS5PADDING,
                 CBCPKCS5PaddingTests);
-        testData.put("AES/CTR/NoPadding", cipherCTRTests);
+        testData.put(CipherTransformation.AES_CTR_NOPADDING, cipherCTRTests);
     }
 
-    public static String[] getTestData(String transformation) {
+    public static String[] getTestData(CipherTransformation transformation) {
         return testData.get(transformation);
     }
 }
diff --git a/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java b/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java
index bb587f4..c055616 100644
--- a/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java
+++ b/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java
@@ -33,6 +33,7 @@ import java.util.Random;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
 
+import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.cipher.CryptoCipher;
 import org.apache.commons.crypto.cipher.JceCipher;
 import org.apache.commons.crypto.cipher.OpensslCipher;
@@ -55,7 +56,7 @@ public abstract class AbstractCipherStreamTest {
 
     private final String jceCipherClass = JceCipher.class.getName();
     private final String opensslCipherClass = OpensslCipher.class.getName();
-    protected String transformation;
+    protected CipherTransformation transformation;
 
     public abstract void setUp() throws IOException;
 
diff --git a/src/test/java/org/apache/commons/crypto/stream/CBCNoPaddingCipherStreamTest.java b/src/test/java/org/apache/commons/crypto/stream/CBCNoPaddingCipherStreamTest.java
index 4fb21b6..fcf569d 100644
--- a/src/test/java/org/apache/commons/crypto/stream/CBCNoPaddingCipherStreamTest.java
+++ b/src/test/java/org/apache/commons/crypto/stream/CBCNoPaddingCipherStreamTest.java
@@ -19,11 +19,13 @@ package org.apache.commons.crypto.stream;
 
 import java.io.IOException;
 
+import org.apache.commons.crypto.cipher.CipherTransformation;
+
 public class CBCNoPaddingCipherStreamTest extends AbstractCipherStreamTest {
 
     @Override
     public void setUp() throws IOException {
-        transformation = "AES/CBC/NoPadding";
+        transformation = CipherTransformation.AES_CBC_NOPADDING;
     }
 
 }
diff --git a/src/test/java/org/apache/commons/crypto/stream/CBCPKCS5PaddingCipherStreamTest.java b/src/test/java/org/apache/commons/crypto/stream/CBCPKCS5PaddingCipherStreamTest.java
index 99cd31f..830b970 100644
--- a/src/test/java/org/apache/commons/crypto/stream/CBCPKCS5PaddingCipherStreamTest.java
+++ b/src/test/java/org/apache/commons/crypto/stream/CBCPKCS5PaddingCipherStreamTest.java
@@ -19,10 +19,12 @@ package org.apache.commons.crypto.stream;
 
 import java.io.IOException;
 
+import org.apache.commons.crypto.cipher.CipherTransformation;
+
 public class CBCPKCS5PaddingCipherStreamTest extends AbstractCipherStreamTest {
 
     @Override
     public void setUp() throws IOException {
-        transformation = "AES/CBC/PKCS5Padding";
+        transformation = CipherTransformation.AES_CBC_PKCS5PADDING;
     }
 }
diff --git a/src/test/java/org/apache/commons/crypto/stream/CTRCryptoStreamTest.java b/src/test/java/org/apache/commons/crypto/stream/CTRCryptoStreamTest.java
index 3ba55ec..4a87a9b 100644
--- a/src/test/java/org/apache/commons/crypto/stream/CTRCryptoStreamTest.java
+++ b/src/test/java/org/apache/commons/crypto/stream/CTRCryptoStreamTest.java
@@ -23,12 +23,13 @@ import java.io.IOException;
 import java.nio.channels.Channels;
 
 import org.apache.commons.crypto.cipher.CryptoCipher;
+import org.apache.commons.crypto.cipher.CipherTransformation;
 
 public class CTRCryptoStreamTest extends AbstractCipherStreamTest {
 
     @Override
     public void setUp() throws IOException {
-        transformation = "AES/CTR/NoPadding";
+        transformation = CipherTransformation.AES_CTR_NOPADDING;
     }
 
     @Override
diff --git a/src/test/java/org/apache/commons/crypto/stream/CTRNoPaddingCipherStreamTest.java b/src/test/java/org/apache/commons/crypto/stream/CTRNoPaddingCipherStreamTest.java
index 76b8a7e..2638a39 100644
--- a/src/test/java/org/apache/commons/crypto/stream/CTRNoPaddingCipherStreamTest.java
+++ b/src/test/java/org/apache/commons/crypto/stream/CTRNoPaddingCipherStreamTest.java
@@ -19,11 +19,13 @@ package org.apache.commons.crypto.stream;
 
 import java.io.IOException;
 
+import org.apache.commons.crypto.cipher.CipherTransformation;
+
 public class CTRNoPaddingCipherStreamTest extends AbstractCipherStreamTest {
 
     @Override
     public void setUp() throws IOException {
-        transformation = "AES/CTR/NoPadding";
+        transformation = CipherTransformation.AES_CTR_NOPADDING;
     }
 
 }
diff --git a/src/test/java/org/apache/commons/crypto/stream/PositionedCryptoInputStreamTest.java b/src/test/java/org/apache/commons/crypto/stream/PositionedCryptoInputStreamTest.java
index a9c11e4..7f6bf4e 100644
--- a/src/test/java/org/apache/commons/crypto/stream/PositionedCryptoInputStreamTest.java
+++ b/src/test/java/org/apache/commons/crypto/stream/PositionedCryptoInputStreamTest.java
@@ -19,6 +19,7 @@
 package org.apache.commons.crypto.stream;
 
 import org.apache.commons.crypto.cipher.CryptoCipher;
+import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.cipher.JceCipher;
 import org.apache.commons.crypto.cipher.OpensslCipher;
 import org.apache.commons.crypto.stream.input.Input;
@@ -55,7 +56,7 @@ public class PositionedCryptoInputStreamTest {
 
     private final String jceCipherClass = JceCipher.class.getName();
     private final String opensslCipherClass = OpensslCipher.class.getName();
-    private String transformation = "AES/CTR/NoPadding";
+    private CipherTransformation transformation = CipherTransformation.AES_CTR_NOPADDING;
 
     @Before
     public void before() throws IOException {
