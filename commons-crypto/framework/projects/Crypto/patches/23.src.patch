diff --git a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java b/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
index 3509162..9e59cff 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
@@ -18,17 +18,24 @@
 package org.apache.commons.crypto.cipher;
 
 import java.security.GeneralSecurityException;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Properties;
 
 import org.apache.commons.crypto.utils.ReflectionUtils;
 import org.apache.commons.crypto.utils.Utils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * This is the factory class used for creating cipher class
  */
 public class CryptoCipherFactory {
 
+    /** LOG instance for {@link CryptoCipherFactory} */
+    private final static Logger LOG = LoggerFactory
+            .getLogger(CryptoCipherFactory.class);
+
     /**
      * The private Constructor of {@link CryptoCipherFactory}.
      */
@@ -46,36 +53,28 @@ public class CryptoCipherFactory {
      */
     public static CryptoCipher getInstance(CipherTransformation transformation,
             Properties props) throws GeneralSecurityException {
-
-        List<String> klasses =  Utils.splitClassNames(
-                Utils.getCipherClassString(props), ",");
+        List<Class<? extends CryptoCipher>> klasses = getCipherClasses(props);
         CryptoCipher cipher = null;
-
-        StringBuilder errorMessage = new StringBuilder("CryptoCipher ");
         if (klasses != null) {
-            for (String klass : klasses) {
+            for (Class<? extends CryptoCipher> klass : klasses) {
                 try {
-                    Class<?> cls = ReflectionUtils.getClassByName(klass);
-                    cipher = ReflectionUtils.newInstance(cls.asSubclass
-                            (CryptoCipher.class), props, transformation);
+                    cipher = ReflectionUtils.newInstance(klass, props,
+                            transformation);
                     if (cipher != null) {
+                        LOG.debug("Using cipher {} for transformation {}.",
+                                klass.getName(), transformation.getName());
                         break;
                     }
                 } catch (Exception e) {
-                    errorMessage.append("{" + klass + "}");
+                    LOG.error(
+                            "CryptoCipher {} is not available or transformation {} is not "
+                                    + "supported.", klass.getName(),
+                            transformation.getName());
                 }
             }
         }
 
-        if (cipher != null) {
-            return cipher;
-        } else if (Utils.isFallbackEnable(props)) {
-            return new JceCipher(props,transformation);
-        } else {
-            errorMessage.append(" is not available or transformation " +
-                    transformation.getName() + " is not supported.");
-            throw new GeneralSecurityException(errorMessage.toString());
-        }
+        return (cipher == null) ? new JceCipher(props, transformation) : cipher;
     }
 
     /**
@@ -92,4 +91,29 @@ public class CryptoCipherFactory {
         return getInstance(transformation, new Properties());
     }
 
+    /**
+     * Returns OpenSSLCipher if Properties is null or empty by default.
+     *
+     * @param props the configuration properties.
+     * @return the OpenSSLCipher instance.
+     */
+    private static List<Class<? extends CryptoCipher>> getCipherClasses(
+            Properties props) {
+        List<Class<? extends CryptoCipher>> result = new ArrayList<Class<? extends CryptoCipher>>();
+        String cipherClassString = Utils.getCipherClassString(props);
+
+        for (String c : Utils.splitClassNames(cipherClassString, ",")) {
+            try {
+                Class<?> cls = ReflectionUtils.getClassByName(c);
+                result.add(cls.asSubclass(CryptoCipher.class));
+            } catch (ClassCastException e) {
+                LOG.error("Class {} is not a CryptoCipher.", c);
+            } catch (ClassNotFoundException e) {
+                LOG.error("CryptoCipher {} not found.", c);
+            }
+        }
+
+        return result;
+    }
+
 }
diff --git a/src/main/java/org/apache/commons/crypto/cipher/Openssl.java b/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
index 0953202..34989ed 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
@@ -20,11 +20,15 @@ package org.apache.commons.crypto.cipher;
 import java.nio.ByteBuffer;
 import java.security.NoSuchAlgorithmException;
 import java.util.StringTokenizer;
+
 import javax.crypto.BadPaddingException;
 import javax.crypto.IllegalBlockSizeException;
 import javax.crypto.NoSuchPaddingException;
 import javax.crypto.ShortBufferException;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
 import org.apache.commons.crypto.utils.NativeCodeLoader;
 import org.apache.commons.crypto.utils.Utils;
 
@@ -33,6 +37,7 @@ import org.apache.commons.crypto.utils.Utils;
  * It's flexible to add other crypto algorithms/modes.
  */
 final class Openssl {
+    private static final Log LOG = LogFactory.getLog(Openssl.class.getName());
 
     // Mode constant defined by Openssl JNI
     public static final int ENCRYPT_MODE = 1;
@@ -96,6 +101,7 @@ final class Openssl {
             }
         } catch (Throwable t) {
             loadingFailure = t.getMessage();
+            LOG.debug("Failed to load OpenSSL CryptoCipher.", t);
         } finally {
             loadingFailureReason = loadingFailure;
         }
diff --git a/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java b/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
index d808f0d..04d89b2 100644
--- a/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
+++ b/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
@@ -130,22 +130,9 @@ public class ConfigurationKeys {
     public static final String COMMONS_CRYPTO_LIB_TEMPDIR_KEY = CONF_PREFIX
             + "lib.tempdir";
 
-    /**
-     * The configuration key of enable fallback on native failed.
-     */
-    public static final String
-            COMMONS_CRYPTO_ENABLE_FALLBACK_ON_NATIVE_FAILED_KEY = CONF_PREFIX +
-            "enable.fallback";
-
-    /**
-     * The default value of enable fallback on native failed.
-     */
-    public static final boolean
-            COMMONS_CRYPTO_ENABLE_FALLBACK_ON_NATIVE_FAILED_DEFAULT = true;
-
-    /**
-     * The private constructor of {@Link ConfigurationKeys}.
-     */
+  /**
+   * The private constructor of {@Link ConfigurationKeys}.
+   */
     private ConfigurationKeys() {
     }
 }
diff --git a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java b/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
index a97a853..f1dc270 100644
--- a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
+++ b/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
@@ -20,14 +20,20 @@ package org.apache.commons.crypto.random;
 import java.security.GeneralSecurityException;
 import java.util.Properties;
 
-import org.apache.commons.crypto.utils.ReflectionUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import org.apache.commons.crypto.utils.Utils;
+import org.apache.commons.crypto.utils.ReflectionUtils;
+
 import static org.apache.commons.crypto.conf.ConfigurationKeys.COMMONS_CRYPTO_SECURE_RANDOM_CLASSES_KEY;
 
 /**
  * This is the factory class used for {@link CryptoRandom}.
  */
 public class CryptoRandomFactory {
+    public final static Logger LOG = LoggerFactory
+            .getLogger(CryptoRandomFactory.class);
 
     /**
      * The private constructor of {@Link CryptoRandomFactory}.
@@ -58,7 +64,6 @@ public class CryptoRandomFactory {
                     .getProperty(COMMONS_CRYPTO_SECURE_RANDOM_CLASSES_KEY);
         }
 
-        StringBuilder errorMessage = new StringBuilder();
         CryptoRandom random = null;
         if (cryptoRandomClasses != null) {
             for (String klassName : Utils.splitClassNames(cryptoRandomClasses,
@@ -72,21 +77,13 @@ public class CryptoRandomFactory {
                         break;
                     }
                 } catch (ClassCastException e) {
-                    errorMessage.append("Class: [" + klassName + "] is not a " +
-                            "CryptoCipher.");
+                    LOG.error("Class {} is not a CryptoCipher.", klassName);
                 } catch (ClassNotFoundException e) {
-                    errorMessage.append("CryptoCipher: [" + klassName + "] " +
-                            "not " + "found.");
+                    LOG.error("CryptoCipher {} not found.", klassName);
                 }
             }
         }
 
-        if (random != null) {
-            return random;
-        } else if (Utils.isFallbackEnable(props)) {
-            return  new JavaCryptoRandom(props);
-        } else {
-            throw new GeneralSecurityException(errorMessage.toString());
-        }
+        return (random == null) ? new JavaCryptoRandom(props) : random;
     }
 }
diff --git a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandom.java
index af78ddd..1813624 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandom.java
@@ -21,6 +21,9 @@ import java.security.NoSuchAlgorithmException;
 import java.util.Properties;
 import java.util.Random;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
 import org.apache.commons.crypto.utils.NativeCodeLoader;
 import org.apache.commons.crypto.utils.Utils;
 
@@ -43,6 +46,8 @@ import org.apache.commons.crypto.utils.Utils;
  */
 public class OpensslCryptoRandom extends Random implements CryptoRandom {
     private static final long serialVersionUID = -7828193502768789584L;
+    private static final Log LOG = LogFactory.getLog(OpensslCryptoRandom.class
+            .getName());
 
     /** If native SecureRandom unavailable, use java SecureRandom */
     private final JavaCryptoRandom fallback;
@@ -55,7 +60,7 @@ public class OpensslCryptoRandom extends Random implements CryptoRandom {
                 OpensslCryptoRandomNative.initSR();
                 opensslLoaded = true;
             } catch (Throwable t) {
-                ; // NOPMD
+                LOG.error("Failed to load Openssl CryptoRandom", t);
             }
         }
         nativeEnabled = opensslLoaded;
diff --git a/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
index 1525023..d53f074 100644
--- a/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
@@ -25,16 +25,19 @@ import java.util.Random;
 
 import org.apache.commons.crypto.utils.IOUtils;
 import org.apache.commons.crypto.utils.Utils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 /**
  * A Random implementation that uses random bytes sourced from the operating
  * system.
  */
 public class OsCryptoRandom extends Random implements CryptoRandom {
+    public static final Log LOG = LogFactory.getLog(OsCryptoRandom.class);
 
     private static final long serialVersionUID = 6391500337172057900L;
 
-    private static final int RESERVOIR_LENGTH = 8192;
+    private final int RESERVOIR_LENGTH = 8192;
 
     private String randomDevPath;
 
@@ -128,7 +131,7 @@ public class OsCryptoRandom extends Random implements CryptoRandom {
     @Override
     synchronized public void close() {
         if (stream != null) {
-            IOUtils.cleanup(stream);
+            IOUtils.cleanup(LOG, stream);
             stream = null;
         }
     }
diff --git a/src/main/java/org/apache/commons/crypto/utils/IOUtils.java b/src/main/java/org/apache/commons/crypto/utils/IOUtils.java
index 521bdf2..a766613 100644
--- a/src/main/java/org/apache/commons/crypto/utils/IOUtils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/IOUtils.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.io.InputStream;
 
 import org.apache.commons.crypto.stream.input.Input;
+import org.apache.commons.logging.Log;
 
 /**
  * General utility methods for working with IO.
@@ -84,15 +85,18 @@ public final class IOUtils {
      * Closes the Closeable objects and <b>ignore</b> any {@link IOException} or
      * null pointers. Must only be used for cleanup in exception handlers.
      *
+     * @param log the log to record problems to at debug level. Can be null.
      * @param closeables the objects to close.
      */
-    public static void cleanup(java.io.Closeable... closeables) {
+    public static void cleanup(Log log, java.io.Closeable... closeables) {
         for (java.io.Closeable c : closeables) {
             if (c != null) {
                 try {
                     c.close();
                 } catch (Throwable e) {
-                    ; // NOPMD
+                    if (log != null && log.isDebugEnabled()) {
+                        log.debug("Exception in closing " + c, e);
+                    }
                 }
             }
         }
diff --git a/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java b/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
index 8738157..59a102f 100644
--- a/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
+++ b/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
@@ -27,6 +27,9 @@ import java.net.URL;
 import java.util.Properties;
 import java.util.UUID;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
 /**
  * A helper to load the native code i.e. libcommons-crypto.so. This handles the
  * fallback to either the bundled libcommons-crypto-Linux-i386-32.so or the
@@ -34,6 +37,8 @@ import java.util.UUID;
  */
 public final class NativeCodeLoader {
 
+    private static final Log LOG = LogFactory.getLog(NativeCodeLoader.class);
+
     private final static boolean nativeCodeLoaded;
     /**
      * The private constructor of {@Link NativeCodeLoader}.
@@ -43,9 +48,11 @@ public final class NativeCodeLoader {
 
     static {
         // Try to load native library and set fallback flag appropriately
-        boolean nativeLoaded = false;
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("Trying to load the custom-built native-commons-crypto library...");
+        }
 
-        //Trying to load the custom-built native-commons-crypto library...");
+        boolean nativeLoaded = false;
         try {
             File nativeLibFile = findNativeLibrary();
             if (nativeLibFile != null) {
@@ -55,13 +62,22 @@ public final class NativeCodeLoader {
                 // Load preinstalled library (in the path -Djava.library.path)
                 System.loadLibrary("commons-crypto");
             }
-            // Loaded the native library
+            LOG.debug("Loaded the native library");
             nativeLoaded = true;
         } catch (Throwable t) {
-            ;// NOPMD: Ignore failure to load
+            // Ignore failure to load
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("Failed to load native library with error: " + t);
+                LOG.debug("java.library.path="
+                        + System.getProperty("java.library.path"));
+            }
         }
 
         nativeCodeLoaded = nativeLoaded;
+        if (!nativeCodeLoaded) {
+            LOG.warn("Unable to load native library for the platform... "
+                    + "using builtin-java classes where applicable");
+        }
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/crypto/utils/Utils.java b/src/main/java/org/apache/commons/crypto/utils/Utils.java
index 0388a0e..46212d5 100644
--- a/src/main/java/org/apache/commons/crypto/utils/Utils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/Utils.java
@@ -275,7 +275,7 @@ public final class Utils {
         int sum = 0;
         while (i-- > 0) {
             // (sum >>> Byte.SIZE) is the carry for addition
-            sum = (initIV[i] & 0xff) + (sum >>> Byte.SIZE); // NOPMD
+            sum = (initIV[i] & 0xff) + (sum >>> Byte.SIZE);
             if (j++ < 8) { // Big-endian, and long is 8 bytes length
                 sum += (byte) counter & 0xff;
                 counter >>>= 8;
@@ -385,25 +385,4 @@ public final class Utils {
         }
         return res;
     }
-
-    /**
-     * Returns true if Fallback is enabled when native failed.
-     * @param props The <code>Properties</code> class represents a set of
-     *        properties.
-     * @return true if Fallback is enabled when native failed.
-     */
-    public static boolean isFallbackEnable(Properties props) {
-        String enableFallback = props.getProperty(ConfigurationKeys.
-                COMMONS_CRYPTO_ENABLE_FALLBACK_ON_NATIVE_FAILED_KEY);
-        if (enableFallback == null || enableFallback.isEmpty()) {
-            enableFallback = System.getProperty(ConfigurationKeys.
-                    COMMONS_CRYPTO_ENABLE_FALLBACK_ON_NATIVE_FAILED_KEY);
-        }
-        if (enableFallback == null || enableFallback.isEmpty()) {
-            return ConfigurationKeys
-                    .COMMONS_CRYPTO_ENABLE_FALLBACK_ON_NATIVE_FAILED_DEFAULT;
-        } else {
-            return Boolean.valueOf(enableFallback);
-        }
-    }
 }
