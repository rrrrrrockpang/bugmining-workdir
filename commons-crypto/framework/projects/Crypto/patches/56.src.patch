diff --git a/src/main/java/org/apache/commons/crypto/Crypto.java b/src/main/java/org/apache/commons/crypto/Crypto.java
index e7aa101..85e2186 100644
--- a/src/main/java/org/apache/commons/crypto/Crypto.java
+++ b/src/main/java/org/apache/commons/crypto/Crypto.java
@@ -45,6 +45,15 @@ public final class Crypto {
     public static final String LIB_TEMPDIR_KEY = Crypto.CONF_PREFIX
             + "lib.tempdir";
 
+    /**
+     * Gets the currently active version of Apache Commons Crypto.
+     * 
+     * @return the version
+     */
+    public static String getVersion() {
+        return NativeCodeLoader.getVersion();
+    }
+
     /**
      * Checks whether the native code has been successfully loaded for the platform.
      * 
diff --git a/src/main/java/org/apache/commons/crypto/NativeCodeLoader.java b/src/main/java/org/apache/commons/crypto/NativeCodeLoader.java
index 4b5a765..4d4dbcb 100644
--- a/src/main/java/org/apache/commons/crypto/NativeCodeLoader.java
+++ b/src/main/java/org/apache/commons/crypto/NativeCodeLoader.java
@@ -149,8 +149,8 @@ final class NativeCodeLoader {
         // loaders
         // can read the libcommons-crypto multiple times.
         String uuid = UUID.randomUUID().toString();
-        String extractedLibFileName = String.format("commons-crypto-%s-%s",
-                uuid, libraryFileName);
+        String extractedLibFileName = String.format("commons-crypto-%s-%s-%s",
+                getVersion(), uuid, libraryFileName);
         File extractedLibFile = new File(targetFolder, extractedLibFileName);
 
         InputStream reader = null;
@@ -214,6 +214,31 @@ final class NativeCodeLoader {
         }
     }
 
+    /**
+     * Gets the version by reading pom.properties embedded in jar. This version
+     * data is used as a suffix of a dll file extracted from the jar.
+     *
+     * @return the version string
+     */
+    static String getVersion() {
+        URL versionFile = NativeCodeLoader.class
+                .getResource("/META-INF/maven/org.apache.commons.crypto/commons-crypto/pom.properties");
+        String version = "unknown";
+        if (versionFile != null) {
+            Properties versionData = new Properties();
+            try {
+                versionData.load(versionFile.openStream());
+                version = versionData.getProperty("version", version);
+                if (version.equals("unknown")) {
+                    version = versionData.getProperty("VERSION", version);
+                }
+                version = version.trim().replaceAll("[^0-9M\\.]", "");
+            } catch (IOException e) { // NOPMD
+            }
+        }
+        return version;
+    }
+
     /**
      * Checks whether in1 and in2 is equal.
      *
