diff --git a/src/main/java/org/apache/commons/crypto/cipher/Openssl.java b/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
index 34989ed..2837761 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
@@ -142,7 +142,7 @@ final class Openssl {
      * @throws NoSuchPaddingException if <code>transformation</code> contains a
      *         padding scheme that is not available.
      */
-    public static Openssl getInstance(String transformation)
+    public static final Openssl getInstance(String transformation)
             throws NoSuchAlgorithmException, NoSuchPaddingException {
         Transform transform = tokenizeTransformation(transformation);
         int algorithmMode = AlgorithmMode.get(transform.algorithm,
diff --git a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java b/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
index f1dc270..eb536ef 100644
--- a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
+++ b/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
@@ -35,9 +35,9 @@ public class CryptoRandomFactory {
     public final static Logger LOG = LoggerFactory
             .getLogger(CryptoRandomFactory.class);
 
-    /**
-     * The private constructor of {@Link CryptoRandomFactory}.
-     */
+  /**
+   * The private constructor of {@Link CryptoRandomFactory}.
+   */
     private CryptoRandomFactory() {
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
index d53f074..2e6fd00 100644
--- a/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
@@ -120,7 +120,7 @@ public class OsCryptoRandom extends Random implements CryptoRandom {
         fillReservoir(4);
         int n = 0;
         for (int i = 0; i < 4; i++) {
-            n = (n << 8) | (reservoir[pos++] & 0xff);
+            n = ((n << 8) | (reservoir[pos++] & 0xff));
         }
         return n & (0xffffffff >> (32 - nbits));
     }
diff --git a/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java
index db974ab..59a719b 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java
@@ -197,7 +197,6 @@ public class CryptoInputStream extends InputStream implements
         int n;
         while ((n = read(oneByteBuf, 0, 1)) == 0) {
             /* no op */
-            ;
         }
         return (n == -1) ? -1 : oneByteBuf[0] & 0xff;
     }
diff --git a/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java b/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
index 59a102f..2068828 100644
--- a/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
+++ b/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
@@ -107,11 +107,13 @@ public final class NativeCodeLoader {
         boolean hasNativeLib = hasResource(nativeLibraryPath + "/"
                 + nativeLibraryName);
         if (!hasNativeLib) {
-            String altName = "libcommons-crypto.jnilib";
-            if (OSInfo.getOSName().equals("Mac") && hasResource(nativeLibraryPath + "/" + altName)) {
+            if (OSInfo.getOSName().equals("Mac")) {
                 // Fix for openjdk7 for Mac
-                nativeLibraryName = altName;
-                hasNativeLib = true;
+                String altName = "libcommons-crypto.jnilib";
+                if (hasResource(nativeLibraryPath + "/" + altName)) {
+                    nativeLibraryName = altName;
+                    hasNativeLib = true;
+                }
             }
         }
 
diff --git a/src/main/java/org/apache/commons/crypto/utils/OSInfo.java b/src/main/java/org/apache/commons/crypto/utils/OSInfo.java
index f809b99..f4c31fb 100644
--- a/src/main/java/org/apache/commons/crypto/utils/OSInfo.java
+++ b/src/main/java/org/apache/commons/crypto/utils/OSInfo.java
@@ -168,9 +168,9 @@ public class OSInfo {
                 if (exitCode == 0) {
                     return "armhf";
                 }
-            } catch (IOException e) { //NOPMD
+            } catch (IOException e) {
                 // ignored: fall back to "arm" arch (soft-float ABI)
-            } catch (InterruptedException e) { //NOPMD
+            } catch (InterruptedException e) {
                 // ignored: fall back to "arm" arch (soft-float ABI)
             }
         } else {
diff --git a/src/main/java/org/apache/commons/crypto/utils/Utils.java b/src/main/java/org/apache/commons/crypto/utils/Utils.java
index aac0995..5507de2 100644
--- a/src/main/java/org/apache/commons/crypto/utils/Utils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/Utils.java
@@ -31,6 +31,17 @@ import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.cipher.CryptoCipher;
 import org.apache.commons.crypto.cipher.CryptoCipherFactory;
 import org.apache.commons.crypto.conf.ConfigurationKeys;
+import static org.apache.commons.crypto.conf.ConfigurationKeys.COMMONS_CRYPTO_CIPHER_CLASSES_DEFAULT;
+import static org.apache.commons.crypto.conf.ConfigurationKeys.COMMONS_CRYPTO_CIPHER_CLASSES_KEY;
+import static org.apache.commons.crypto.conf.ConfigurationKeys.COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY;
+import static org.apache.commons.crypto.conf.ConfigurationKeys.COMMONS_CRYPTO_LIB_NAME_KEY;
+import static org.apache.commons.crypto.conf.ConfigurationKeys.COMMONS_CRYPTO_LIB_PATH_KEY;
+import static org.apache.commons.crypto.conf.ConfigurationKeys.COMMONS_CRYPTO_LIB_TEMPDIR_KEY;
+import static org.apache.commons.crypto.conf.ConfigurationKeys.COMMONS_CRYPTO_SECURE_RANDOM_DEVICE_FILE_PATH_DEFAULT;
+import static org.apache.commons.crypto.conf.ConfigurationKeys.COMMONS_CRYPTO_SECURE_RANDOM_DEVICE_FILE_PATH_KEY;
+import static org.apache.commons.crypto.conf.ConfigurationKeys.COMMONS_CRYPTO_STREAM_BUFFER_SIZE_DEFAULT;
+import static org.apache.commons.crypto.conf.ConfigurationKeys.COMMONS_CRYPTO_STREAM_BUFFER_SIZE_KEY;
+import static org.apache.commons.crypto.conf.ConfigurationKeys.COMMONS_CRYPTO_SYSTEM_PROPERTIES_FILE;
 
 /**
  * General utility methods.
@@ -65,7 +76,7 @@ public final class Utils {
     private static void loadSystemProperties() {
         try {
             InputStream is = Thread.currentThread().getContextClassLoader()
-                    .getResourceAsStream(ConfigurationKeys.COMMONS_CRYPTO_SYSTEM_PROPERTIES_FILE);
+                    .getResourceAsStream(COMMONS_CRYPTO_SYSTEM_PROPERTIES_FILE);
 
             if (is == null) {
                 return; // no configuration file is found
@@ -77,13 +88,15 @@ public final class Utils {
             Enumeration<?> names = props.propertyNames();
             while (names.hasMoreElements()) {
                 String name = (String) names.nextElement();
-                if (name.startsWith(ConfigurationKeys.CONF_PREFIX) && System.getProperty(name) == null) {
-                    System.setProperty(name, props.getProperty(name));
+                if (name.startsWith(ConfigurationKeys.CONF_PREFIX)) {
+                    if (System.getProperty(name) == null) {
+                        System.setProperty(name, props.getProperty(name));
+                    }
                 }
             }
         } catch (Throwable ex) {
             System.err.println("Could not load '"
-                    + ConfigurationKeys.COMMONS_CRYPTO_SYSTEM_PROPERTIES_FILE
+                    + COMMONS_CRYPTO_SYSTEM_PROPERTIES_FILE
                     + "' from classpath: " + ex.toString());
         }
     }
@@ -112,9 +125,8 @@ public final class Utils {
                     return;
                 }
             }
-        } catch (ReflectiveOperationException e) { // NOPMD
+        } catch (ReflectiveOperationException e) {
             // Ignore the Reflection exception.
-
         }
     }
 
@@ -127,13 +139,13 @@ public final class Utils {
      * */
     public static int getBufferSize(Properties props) {
         String bufferSizeStr = props
-                .getProperty(ConfigurationKeys.COMMONS_CRYPTO_STREAM_BUFFER_SIZE_KEY);
+                .getProperty(COMMONS_CRYPTO_STREAM_BUFFER_SIZE_KEY);
         if (bufferSizeStr == null || bufferSizeStr.isEmpty()) {
             bufferSizeStr = System
-                    .getProperty(ConfigurationKeys.COMMONS_CRYPTO_STREAM_BUFFER_SIZE_KEY);
+                    .getProperty(COMMONS_CRYPTO_STREAM_BUFFER_SIZE_KEY);
         }
         if (bufferSizeStr == null || bufferSizeStr.isEmpty()) {
-            return ConfigurationKeys.COMMONS_CRYPTO_STREAM_BUFFER_SIZE_DEFAULT;
+            return COMMONS_CRYPTO_STREAM_BUFFER_SIZE_DEFAULT;
         }
         return Integer.parseInt(bufferSizeStr);
     }
@@ -146,13 +158,13 @@ public final class Utils {
      * @return the cipher class based on the props.
      */
     public static String getCipherClassString(Properties props) {
-        final String configName = ConfigurationKeys.COMMONS_CRYPTO_CIPHER_CLASSES_KEY;
+        final String configName = COMMONS_CRYPTO_CIPHER_CLASSES_KEY;
         String cipherClassString = props.getProperty(configName) != null ? props
-                .getProperty(configName, ConfigurationKeys.COMMONS_CRYPTO_CIPHER_CLASSES_DEFAULT)
+                .getProperty(configName, COMMONS_CRYPTO_CIPHER_CLASSES_DEFAULT)
                 : System.getProperty(configName,
-                ConfigurationKeys.COMMONS_CRYPTO_CIPHER_CLASSES_DEFAULT);
+                        COMMONS_CRYPTO_CIPHER_CLASSES_DEFAULT);
         if (cipherClassString.isEmpty()) {
-            cipherClassString = ConfigurationKeys.COMMONS_CRYPTO_CIPHER_CLASSES_DEFAULT;
+            cipherClassString = COMMONS_CRYPTO_CIPHER_CLASSES_DEFAULT;
         }
         return cipherClassString;
     }
@@ -165,9 +177,9 @@ public final class Utils {
      * @return the jce provider based on the props.
      */
     public static String getJCEProvider(Properties props) {
-        return props.getProperty(ConfigurationKeys.COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY) !=
-            null ? props.getProperty(ConfigurationKeys.COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY)
-            : System.getProperty(ConfigurationKeys.COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY);
+        return props.getProperty(COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY) != null ? props
+                .getProperty(COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY) : System
+                .getProperty(COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY);
     }
 
     /**
@@ -179,11 +191,11 @@ public final class Utils {
      */
     public static String getRandomDevPath(Properties props) {
         String devPath = props
-                .getProperty(ConfigurationKeys.COMMONS_CRYPTO_SECURE_RANDOM_DEVICE_FILE_PATH_KEY);
+                .getProperty(COMMONS_CRYPTO_SECURE_RANDOM_DEVICE_FILE_PATH_KEY);
         if (devPath == null) {
             devPath = System.getProperty(
-                    ConfigurationKeys.COMMONS_CRYPTO_SECURE_RANDOM_DEVICE_FILE_PATH_KEY,
-                    ConfigurationKeys.COMMONS_CRYPTO_SECURE_RANDOM_DEVICE_FILE_PATH_DEFAULT);
+                    COMMONS_CRYPTO_SECURE_RANDOM_DEVICE_FILE_PATH_KEY,
+                    COMMONS_CRYPTO_SECURE_RANDOM_DEVICE_FILE_PATH_DEFAULT);
         }
         return devPath;
     }
@@ -194,7 +206,7 @@ public final class Utils {
      * @return the path of native library.
      */
     public static String getLibPath() {
-        return System.getProperty(ConfigurationKeys.COMMONS_CRYPTO_LIB_PATH_KEY);
+        return System.getProperty(COMMONS_CRYPTO_LIB_PATH_KEY);
     }
 
     /**
@@ -203,7 +215,7 @@ public final class Utils {
      * @return the file name of native library.
      */
     public static String getLibName() {
-        return System.getProperty(ConfigurationKeys.COMMONS_CRYPTO_LIB_NAME_KEY);
+        return System.getProperty(COMMONS_CRYPTO_LIB_NAME_KEY);
     }
 
     /**
@@ -212,7 +224,7 @@ public final class Utils {
      * @return the temp directory.
      */
     public static String getTmpDir() {
-        return System.getProperty(ConfigurationKeys.COMMONS_CRYPTO_LIB_TEMPDIR_KEY,
+        return System.getProperty(COMMONS_CRYPTO_LIB_TEMPDIR_KEY,
                 System.getProperty("java.io.tmpdir"));
     }
 
@@ -275,7 +287,7 @@ public final class Utils {
         int sum = 0;
         while (i-- > 0) {
             // (sum >>> Byte.SIZE) is the carry for addition
-            sum = initIV[i] & 0xff + sum >>> Byte.SIZE;
+            sum = (initIV[i] & 0xff) + (sum >>> Byte.SIZE);
             if (j++ < 8) { // Big-endian, and long is 8 bytes length
                 sum += (byte) counter & 0xff;
                 counter >>>= 8;
