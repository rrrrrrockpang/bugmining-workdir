diff --git a/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java
index e7f026f..8368ef7 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java
@@ -17,7 +17,7 @@
  */
 package org.apache.commons.crypto.random;
 
-import java.security.GeneralSecurityException;
+import java.security.NoSuchAlgorithmException;
 import java.util.Properties;
 import java.util.Random;
 
@@ -44,55 +44,46 @@ import org.apache.commons.crypto.utils.Utils;
 class OpenSslCryptoRandom extends Random implements CryptoRandom {
     private static final long serialVersionUID = -7828193502768789584L;
 
+    /** If native SecureRandom unavailable, use java SecureRandom */
+    private final JavaCryptoRandom fallback;
     private static final boolean nativeEnabled;
 
-    private static final Exception initException;
-
     static {
         boolean opensslLoaded = false;
-        Exception except = null;
         if (Crypto.isNativeCodeLoaded()) {
             try {
                 OpenSslCryptoRandomNative.initSR();
                 opensslLoaded = true;
-            } catch (Exception t) {
-                except = t;
+            } catch (Exception t) {// NOPMD
             }
         }
         nativeEnabled = opensslLoaded;
-        initException = except;
     }
 
     /**
-     * Judges whether native library was successfully loaded and initialised.
+     * Judges whether loading native library successfully.
      *
-     * @return true if library was loaded and initialised
+     * @return true if loading library successfully.
      */
-    public static boolean isNativeCodeEnabled() {
+    public static boolean isNativeCodeLoaded() {
         return nativeEnabled;
     }
 
     /**
      * Constructs a {@link OpenSslCryptoRandom}.
      *
-     * @param props the configuration properties - not used
-     * @throws GeneralSecurityException if the native library could not be initialised successfully
+     * @param props the configuration properties
+     * Only used to construct the fallback {@link JavaCryptoRandom} instance
+     * @throws NoSuchAlgorithmException if no Provider supports a
+     *         SecureRandomSpi implementation for the specified algorithm.
      */
     // N.B. this class is not public/protected so does not appear in the main Javadoc
     // Please ensure that property use is documented in the enum CryptoRandomFactory.RandomProvider
-    public OpenSslCryptoRandom(Properties props) throws GeneralSecurityException {
-        if (!nativeEnabled) {
-            if (initException != null) {
-                throw new GeneralSecurityException("Native library could not be initialised", initException);
-            } else {
-                throw new GeneralSecurityException("Native library is not loaded");
-            }
-        } else {
-            // Check that nextRandBytes works (is this really needed?)
-            if (!OpenSslCryptoRandomNative.nextRandBytes(new byte[1])) {
-                throw new GeneralSecurityException("Check of nextRandBytes failed");
-            }
-        }
+    public OpenSslCryptoRandom(Properties props)
+            throws NoSuchAlgorithmException {
+        //fallback needs to be initialized here in any case cause even if
+        //nativeEnabled is true OpenSslCryptoRandomNative.nextRandBytes may fail
+        fallback = new JavaCryptoRandom(props);
     }
 
     /**
@@ -102,10 +93,8 @@ class OpenSslCryptoRandom extends Random implements CryptoRandom {
      */
     @Override
     public void nextBytes(byte[] bytes) {
-        // Constructor ensures that native is enabled here
-        if (!OpenSslCryptoRandomNative.nextRandBytes(bytes)) {
-            // Assume it's a problem with the argument, rather than an internal issue
-            throw new IllegalArgumentException("The nextRandBytes method failed");
+        if (!nativeEnabled || !OpenSslCryptoRandomNative.nextRandBytes(bytes)) {
+            fallback.nextBytes(bytes);
         }
     }
 
@@ -146,10 +135,13 @@ class OpenSslCryptoRandom extends Random implements CryptoRandom {
     }
 
     /**
-     * Overrides {@link java.lang.AutoCloseable#close()}.
-     * Does nothing.
+     * Overrides {@link java.lang.AutoCloseable#close()}. Closes OpenSSL context
+     * if native enabled.
      */
     @Override
     public void close() {
+        if (fallback != null) {
+            fallback.close();
+        }
     }
 }
