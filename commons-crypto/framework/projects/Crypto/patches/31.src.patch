diff --git a/src/main/java/org/apache/commons/crypto/cipher/CipherTransformation.java b/src/main/java/org/apache/commons/crypto/cipher/CipherTransformation.java
new file mode 100644
index 0000000..9a6a358
--- /dev/null
+++ b/src/main/java/org/apache/commons/crypto/cipher/CipherTransformation.java
@@ -0,0 +1,98 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.crypto.cipher;
+
+/**
+ * Defines properties of a CipherTransformation. Modeled after the ciphers in
+ * Cipher.
+ */
+public enum CipherTransformation {
+
+    /** A crypto transformation representing AES/CTR/NoPadding */
+    AES_CTR_NOPADDING("AES/CTR/NoPadding", 16),
+    /** A crypto transformation representing AES/CBC/NoPadding */
+    AES_CBC_NOPADDING("AES/CBC/NoPadding", 16),
+    /** A crypto transformation representing AES/CBC/PKCS5Padding */
+    AES_CBC_PKCS5PADDING("AES/CBC/PKCS5Padding", 16);
+
+    private final String name;
+    private final int algorithmBlockSize;
+
+    /**
+     * Constructor for CipherTransformation. Initalizes the cipher with
+     * algorithm name and block size of the algorithm.
+     *
+     * @param name the name of cipher algorithm
+     * @param algorithmBlockSize the blockSize of cipher algorithm
+     */
+    CipherTransformation(String name, int algorithmBlockSize) {
+        this.name = name;
+        this.algorithmBlockSize = algorithmBlockSize;
+    }
+
+    /**
+     * Gets the algorithm name of cipher.
+     *
+     * @return name of cipher transformation, as in Cipher
+     */
+    public String getName() {
+        return name;
+    }
+
+    /**
+     * Gets the algorithm block size of cipher.
+     *
+     * @return size of an algorithm block in bytes.
+     */
+    public int getAlgorithmBlockSize() {
+        return algorithmBlockSize;
+    }
+
+    /**
+     * Overrides {@link java.lang.Enum#toString()}
+     *
+     * @return the name of cipher algorithm and blocksize.
+     */
+    @Override
+    public String toString() {
+        StringBuilder builder = new StringBuilder("{");
+        builder.append("name: " + name);
+        builder.append(", algorithmBlockSize: " + algorithmBlockSize);
+        builder.append("}");
+        return builder.toString();
+    }
+
+    /**
+     * Converts to CipherTransformation from name, {@link #algorithmBlockSize}
+     * is fixed for certain cipher transformation, just need to compare the
+     * name.
+     *
+     * @param name cipher transformation name
+     * @return CipherTransformation cipher transformation
+     */
+    public static CipherTransformation fromName(String name) {
+        CipherTransformation[] transformations = CipherTransformation.values();
+        for (CipherTransformation transformation : transformations) {
+            if (transformation.getName().equals(name)) {
+                return transformation;
+            }
+        }
+        throw new IllegalArgumentException("Invalid transformation name: "
+                + name);
+    }
+}
diff --git a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipher.java b/src/main/java/org/apache/commons/crypto/cipher/CryptoCipher.java
index 12f2793..5933a1d 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipher.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/CryptoCipher.java
@@ -37,23 +37,11 @@ import javax.crypto.ShortBufferException;
 public interface CryptoCipher extends Closeable {
 
     /**
-     * Returns the block size (in bytes).
+     * Gets the CipherTransformation for this cipher.
      *
-     * @return the block size (in bytes), or 0 if the underlying algorithm is
-     * not a block cipher
+     * @return the CipherTransformation for this cipher.
      */
-    int getBlockSize();
-
-    /**
-     * Returns the algorithm name of this {@code CryptoCipher} object.
-     *
-     * <p>This is the same name that was specified in one of the
-     * {@code CryptoCipherFactory#getInstance} calls that created this
-     * {@code CryptoCipher} object..
-     *
-     * @return the algorithm name of this {@code CryptoCipher} object.
-     */
-    String getAlgorithm();
+    CipherTransformation getTransformation();
 
     /**
      * Initializes the cipher with mode, key and iv.
diff --git a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java b/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
index ac7bb68..307c90a 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
@@ -44,7 +44,7 @@ public class CryptoCipherFactory {
      *         classes with transformation configured.
      * @throws GeneralSecurityException if cipher initialize failed
      */
-    public static CryptoCipher getInstance(String transformation,
+    public static CryptoCipher getInstance(CipherTransformation transformation,
             Properties props) throws GeneralSecurityException {
 
         List<String> klasses =  Utils.splitClassNames(
@@ -73,7 +73,7 @@ public class CryptoCipherFactory {
             return new JceCipher(props,transformation);
         } else {
             errorMessage.append(" is not available or transformation " +
-                    transformation + " is not supported.");
+                    transformation.getName() + " is not supported.");
             throw new GeneralSecurityException(errorMessage.toString());
         }
     }
@@ -82,15 +82,12 @@ public class CryptoCipherFactory {
      * Gets a cipher for algorithm/mode/padding in config value
      * commons.crypto.cipher.transformation
      *
-     * @param transformation the name of the transformation, e.g.,
-     * <i>AES/CBC/PKCS5Padding</i>.
-     * See the Java Cryptography Architecture Standard Algorithm Name Documentation
-     * for information about standard transformation names.
+     * @param transformation CipherTransformation instance.
      * @return CryptoCipher the cipher object Null value will be returned if no
      *         cipher classes with transformation configured.
      * @throws GeneralSecurityException if JCE cipher initialize failed
      */
-    public static CryptoCipher getInstance(String transformation)
+    public static CryptoCipher getInstance(CipherTransformation transformation)
             throws GeneralSecurityException {
         return getInstance(transformation, new Properties());
     }
diff --git a/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java b/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java
index 7dcd606..e39ef0a 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java
@@ -37,6 +37,7 @@ import org.apache.commons.crypto.utils.Utils;
  * Implements the {@link CryptoCipher} using JCE provider.
  */
 public class JceCipher implements CryptoCipher {
+    private final CipherTransformation transformation;
     private final Cipher cipher;
 
     /**
@@ -46,39 +47,26 @@ public class JceCipher implements CryptoCipher {
      * @param transformation transformation for JCE cipher
      * @throws GeneralSecurityException if JCE cipher initialize failed
      */
-    public JceCipher(Properties props, String transformation)
+    public JceCipher(Properties props, CipherTransformation transformation)
             throws GeneralSecurityException {
+        this.transformation = transformation;
+
         String provider = getJCEProvider(props);
         if (provider == null || provider.isEmpty()) {
-            cipher = Cipher.getInstance(transformation);
+            cipher = Cipher.getInstance(transformation.getName());
         } else {
-            cipher = Cipher.getInstance(transformation, provider);
+            cipher = Cipher.getInstance(transformation.getName(), provider);
         }
     }
 
     /**
-     * Returns the block size (in bytes).
-     *
-     * @return the block size (in bytes), or 0 if the underlying algorithm is
-     * not a block cipher
-     */
-    @Override
-    public final int getBlockSize() {
-        return cipher.getBlockSize();
-    }
-
-    /**
-     * Returns the algorithm name of this {@code CryptoCipher} object.
-     *
-     * <p>This is the same name that was specified in one of the
-     * {@code CryptoCipherFactory#getInstance} calls that created this
-     * {@code CryptoCipher} object..
+     * Gets the CipherTransformation for the jce cipher.
      *
-     * @return the algorithm name of this {@code CryptoCipher} object.
+     * @return the CipherTransformation for this cipher
      */
     @Override
-    public String getAlgorithm() {
-        return cipher.getAlgorithm();
+    public CipherTransformation getTransformation() {
+        return transformation;
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpensslCipher.java b/src/main/java/org/apache/commons/crypto/cipher/OpensslCipher.java
index 1cfd3e8..4d01712 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpensslCipher.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpensslCipher.java
@@ -36,13 +36,9 @@ import org.apache.commons.crypto.utils.Utils;
  * Implements the CryptoCipher using JNI into OpenSSL.
  */
 public class OpensslCipher implements CryptoCipher {
-
+    private final CipherTransformation transformation;
     private final Openssl cipher;
 
-    private final String transformation;
-
-    private final static int AES_BLOCK_SIZE = 16;
-
     /**
      * Constructs a {@link CryptoCipher} using JNI into OpenSSL
      *
@@ -50,7 +46,8 @@ public class OpensslCipher implements CryptoCipher {
      * @param transformation transformation for OpenSSL cipher
      * @throws GeneralSecurityException if OpenSSL cipher initialize failed
      */
-    public OpensslCipher(Properties props, String transformation)
+    public OpensslCipher(Properties props, CipherTransformation  // NOPMD
+        transformation)
             throws GeneralSecurityException {
         this.transformation = transformation;
 
@@ -59,31 +56,16 @@ public class OpensslCipher implements CryptoCipher {
             throw new RuntimeException(loadingFailureReason);
         }
 
-        cipher = Openssl.getInstance(transformation);
-    }
-
-    /**
-     * Returns the block size (in bytes).
-     *
-     * @return the block size (in bytes), or 0 if the underlying algorithm is
-     * not a block cipher
-     */
-    @Override
-    public final int getBlockSize() {
-        return AES_BLOCK_SIZE;
+        cipher = Openssl.getInstance(transformation.getName());
     }
 
     /**
-     * Returns the algorithm name of this {@code CryptoCipher} object.
-     *
-     * <p>This is the same name that was specified in one of the
-     * {@code CryptoCipherFactory#getInstance} calls that created this
-     * {@code CryptoCipher} object..
+     * Gets the CipherTransformation for the openssl cipher.
      *
-     * @return the algorithm name of this {@code CryptoCipher} object.
+     * @return the CipherTransformation for this cipher
      */
     @Override
-    public String getAlgorithm() {
+    public CipherTransformation getTransformation() {
         return transformation;
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/examples/CipherByteArrayExample.java b/src/main/java/org/apache/commons/crypto/examples/CipherByteArrayExample.java
index a0a6ea0..36539a9 100644
--- a/src/main/java/org/apache/commons/crypto/examples/CipherByteArrayExample.java
+++ b/src/main/java/org/apache/commons/crypto/examples/CipherByteArrayExample.java
@@ -25,6 +25,7 @@ import javax.crypto.Cipher;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
 
+import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.cipher.CryptoCipher;
 import org.apache.commons.crypto.utils.Utils;
 
@@ -39,7 +40,7 @@ public class CipherByteArrayExample {
         final IvParameterSpec iv = new IvParameterSpec(getUTF8Bytes("1234567890123456"));
         Properties properties = new Properties();
         //Creates a CryptoCipher instance with the transformation and properties.
-        final String transform = "AES/CBC/PKCS5Padding";
+        final CipherTransformation transform = CipherTransformation.AES_CBC_PKCS5PADDING;
         CryptoCipher encipher = Utils.getCipherInstance(transform, properties);
 
         final String sampleInput = "hello world!";
diff --git a/src/main/java/org/apache/commons/crypto/examples/CipherByteBufferExample.java b/src/main/java/org/apache/commons/crypto/examples/CipherByteBufferExample.java
index e614a6c..d9d1db6 100644
--- a/src/main/java/org/apache/commons/crypto/examples/CipherByteBufferExample.java
+++ b/src/main/java/org/apache/commons/crypto/examples/CipherByteBufferExample.java
@@ -26,6 +26,7 @@ import javax.crypto.Cipher;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
 
+import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.cipher.CryptoCipher;
 import org.apache.commons.crypto.utils.Utils;
 
@@ -47,7 +48,7 @@ public class CipherByteBufferExample {
         final IvParameterSpec iv = new IvParameterSpec(getUTF8Bytes("1234567890123456"));
         Properties properties = new Properties();
         //Creates a CryptoCipher instance with the transformation and properties.
-        final String transform = "AES/CBC/PKCS5Padding";
+        final CipherTransformation transform = CipherTransformation.AES_CBC_PKCS5PADDING;
         final ByteBuffer outBuffer;
         final int bufferSize = 1024;
         final int updateBytes;
diff --git a/src/main/java/org/apache/commons/crypto/examples/StreamExample.java b/src/main/java/org/apache/commons/crypto/examples/StreamExample.java
index 8904cb1..5927f80 100644
--- a/src/main/java/org/apache/commons/crypto/examples/StreamExample.java
+++ b/src/main/java/org/apache/commons/crypto/examples/StreamExample.java
@@ -28,6 +28,7 @@ import java.util.Properties;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
 
+import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.stream.CryptoInputStream;
 import org.apache.commons.crypto.stream.CryptoOutputStream;
 
@@ -44,7 +45,7 @@ public class StreamExample {
         final SecretKeySpec key = new SecretKeySpec(getUTF8Bytes("1234567890123456"),"AES");
         final IvParameterSpec iv = new IvParameterSpec(getUTF8Bytes("1234567890123456"));
         Properties properties = new Properties();
-        final String transform = "AES/CBC/PKCS5Padding";
+        final CipherTransformation transform = CipherTransformation.AES_CBC_PKCS5PADDING;
 
         String input = "hello world!";
         //Encryption with CryptoOutputStream.
diff --git a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
index df413d5..33a032d 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
@@ -31,6 +31,7 @@ import javax.crypto.ShortBufferException;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
 
+import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.cipher.CryptoCipher;
 import org.apache.commons.crypto.stream.input.ChannelInput;
 import org.apache.commons.crypto.stream.input.Input;
@@ -168,7 +169,7 @@ public class CTRCryptoInputStream extends CryptoInputStream {
     public CTRCryptoInputStream(Properties props, InputStream in, byte[] key,
             byte[] iv, long streamOffset) throws IOException {
         this(in, Utils.getCipherInstance(
-                "AES/CTR/NoPadding", props), Utils
+                CipherTransformation.AES_CTR_NOPADDING, props), Utils
                 .getBufferSize(props), key, iv, streamOffset);
     }
 
@@ -186,7 +187,7 @@ public class CTRCryptoInputStream extends CryptoInputStream {
     public CTRCryptoInputStream(Properties props, ReadableByteChannel in,
             byte[] key, byte[] iv, long streamOffset) throws IOException {
         this(in, Utils.getCipherInstance(
-                "AES/CTR/NoPadding", props), Utils
+                CipherTransformation.AES_CTR_NOPADDING, props), Utils
                 .getBufferSize(props), key, iv, streamOffset);
     }
 
@@ -534,7 +535,7 @@ public class CTRCryptoInputStream extends CryptoInputStream {
      * @return the counter for input stream position.
      */
     protected long getCounter(long position) {
-        return position / cipher.getBlockSize();
+        return position / cipher.getTransformation().getAlgorithmBlockSize();
     }
 
     /**
@@ -544,7 +545,8 @@ public class CTRCryptoInputStream extends CryptoInputStream {
      * @return the padding for input stream position.
      */
     protected byte getPadding(long position) {
-        return (byte) (position % cipher.getBlockSize());
+        return (byte) (position % cipher.getTransformation()
+                .getAlgorithmBlockSize());
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoOutputStream.java b/src/main/java/org/apache/commons/crypto/stream/CTRCryptoOutputStream.java
index b5e39f2..7d13a39 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoOutputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CTRCryptoOutputStream.java
@@ -31,6 +31,7 @@ import javax.crypto.ShortBufferException;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
 
+import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.cipher.CryptoCipher;
 import org.apache.commons.crypto.stream.output.ChannelOutput;
 import org.apache.commons.crypto.stream.output.Output;
@@ -168,7 +169,7 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
     public CTRCryptoOutputStream(Properties props, OutputStream out,
             byte[] key, byte[] iv, long streamOffset) throws IOException {
         this(out, Utils.getCipherInstance(
-                "AES/CTR/NoPadding", props), Utils
+                CipherTransformation.AES_CTR_NOPADDING, props), Utils
                 .getBufferSize(props), key, iv, streamOffset);
     }
 
@@ -186,7 +187,7 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
     public CTRCryptoOutputStream(Properties props, WritableByteChannel out,
             byte[] key, byte[] iv, long streamOffset) throws IOException {
         this(out, Utils.getCipherInstance(
-                "AES/CTR/NoPadding", props), Utils
+                CipherTransformation.AES_CTR_NOPADDING, props), Utils
                 .getBufferSize(props), key, iv, streamOffset);
     }
 
@@ -321,8 +322,9 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
      */
     private void resetCipher() throws IOException {
         final long counter = streamOffset
-                / cipher.getBlockSize();
-        padding = (byte) (streamOffset % cipher.getBlockSize());
+                / cipher.getTransformation().getAlgorithmBlockSize();
+        padding = (byte) (streamOffset % cipher.getTransformation()
+                .getAlgorithmBlockSize());
         inBuffer.position(padding); // Set proper position for input data.
 
         Utils.calculateIV(initIV, counter, iv);
diff --git a/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java
index ad829da..faeda11 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java
@@ -32,6 +32,7 @@ import javax.crypto.IllegalBlockSizeException;
 import javax.crypto.ShortBufferException;
 import javax.crypto.spec.IvParameterSpec;
 
+import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.cipher.CryptoCipher;
 import org.apache.commons.crypto.stream.input.ChannelInput;
 import org.apache.commons.crypto.stream.input.Input;
@@ -87,10 +88,7 @@ public class CryptoInputStream extends InputStream implements
     /**
      * Constructs a {@link CryptoInputStream}.
      *
-     * @param transformation the name of the transformation, e.g.,
-     * <i>AES/CBC/PKCS5Padding</i>.
-     * See the Java Cryptography Architecture Standard Algorithm Name Documentation
-     * for information about standard transformation names.
+     * @param transformation the CipherTransformation instance.
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
      * @param in the input stream.
@@ -98,7 +96,7 @@ public class CryptoInputStream extends InputStream implements
      * @param params the algorithm parameters.
      * @throws IOException if an I/O error occurs.
      */
-    public CryptoInputStream(String transformation,
+    public CryptoInputStream(CipherTransformation transformation,
             Properties props, InputStream in, Key key,
             AlgorithmParameterSpec params) throws IOException {
         this(in, Utils.getCipherInstance(transformation, props), Utils
@@ -108,10 +106,7 @@ public class CryptoInputStream extends InputStream implements
     /**
      * Constructs a {@link CryptoInputStream}.
      *
-     * @param transformation the name of the transformation, e.g.,
-     * <i>AES/CBC/PKCS5Padding</i>.
-     * See the Java Cryptography Architecture Standard Algorithm Name Documentation
-     * for information about standard transformation names.
+     * @param transformation the CipherTransformation instance.
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
      * @param in the ReadableByteChannel object.
@@ -119,7 +114,7 @@ public class CryptoInputStream extends InputStream implements
      * @param params the algorithm parameters.
      * @throws IOException if an I/O error occurs.
      */
-    public CryptoInputStream(String transformation,
+    public CryptoInputStream(CipherTransformation transformation,
             Properties props, ReadableByteChannel in, Key key,
             AlgorithmParameterSpec params) throws IOException {
         this(in, Utils.getCipherInstance(transformation, props), Utils
@@ -184,7 +179,7 @@ public class CryptoInputStream extends InputStream implements
 
         inBuffer = ByteBuffer.allocateDirect(this.bufferSize);
         outBuffer = ByteBuffer.allocateDirect(this.bufferSize
-                + cipher.getBlockSize());
+                + cipher.getTransformation().getAlgorithmBlockSize());
         outBuffer.limit(0);
 
         initCipher();
diff --git a/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java b/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java
index 477fcf5..b14d7fe 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java
@@ -33,6 +33,7 @@ import javax.crypto.IllegalBlockSizeException;
 import javax.crypto.ShortBufferException;
 import javax.crypto.spec.IvParameterSpec;
 
+import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.cipher.CryptoCipher;
 import org.apache.commons.crypto.stream.output.ChannelOutput;
 import org.apache.commons.crypto.stream.output.Output;
@@ -82,10 +83,7 @@ public class CryptoOutputStream extends OutputStream implements
     /**
      * Constructs a {@link CryptoOutputStream}.
      *
-     * @param transformation the name of the transformation, e.g.,
-     * <i>AES/CBC/PKCS5Padding</i>.
-     * See the Java Cryptography Architecture Standard Algorithm Name Documentation
-     * for information about standard transformation names.
+     * @param transformation the CipherTransformation instance.
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
      * @param out the output stream.
@@ -94,7 +92,7 @@ public class CryptoOutputStream extends OutputStream implements
      * @throws IOException if an I/O error occurs.
      */
 
-    public CryptoOutputStream(String transformation,
+    public CryptoOutputStream(CipherTransformation transformation,
             Properties props, OutputStream out, Key key,
             AlgorithmParameterSpec params) throws IOException {
         this(out, Utils.getCipherInstance(transformation, props), Utils
@@ -105,10 +103,7 @@ public class CryptoOutputStream extends OutputStream implements
     /**
      * Constructs a {@link CryptoOutputStream}.
      *
-     * @param transformation the name of the transformation, e.g.,
-     * <i>AES/CBC/PKCS5Padding</i>.
-     * See the Java Cryptography Architecture Standard Algorithm Name Documentation
-     * for information about standard transformation names.
+     * @param transformation the CipherTransformation instance.
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
      * @param out the WritableByteChannel instance.
@@ -116,7 +111,7 @@ public class CryptoOutputStream extends OutputStream implements
      * @param params the algorithm parameters.
      * @throws IOException if an I/O error occurs.
      */
-    public CryptoOutputStream(String transformation,
+    public CryptoOutputStream(CipherTransformation transformation,
             Properties props, WritableByteChannel out, Key key,
             AlgorithmParameterSpec params) throws IOException {
         this(out, Utils.getCipherInstance(transformation, props), Utils
@@ -185,7 +180,7 @@ public class CryptoOutputStream extends OutputStream implements
 
         inBuffer = ByteBuffer.allocateDirect(this.bufferSize);
         outBuffer = ByteBuffer.allocateDirect(this.bufferSize
-                + cipher.getBlockSize());
+                + cipher.getTransformation().getAlgorithmBlockSize());
 
         initCipher();
     }
diff --git a/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
index da565d1..9a1d7bb 100644
--- a/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
@@ -36,6 +36,7 @@ import org.apache.commons.crypto.cipher.CryptoCipherFactory;
 import org.apache.commons.crypto.stream.input.Input;
 import org.apache.commons.crypto.utils.IOUtils;
 import org.apache.commons.crypto.utils.Utils;
+import static org.apache.commons.crypto.cipher.CipherTransformation.AES_CTR_NOPADDING;
 
 /**
  * PositionedCryptoInputStream provides the capability to decrypt the stream
@@ -72,7 +73,7 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
      */
     public PositionedCryptoInputStream(Properties props, Input in, byte[] key,
             byte[] iv, long streamOffset) throws IOException {
-        this(props, in, Utils.getCipherInstance("AES/CTR/NoPadding", props),
+        this(props, in, Utils.getCipherInstance(AES_CTR_NOPADDING, props),
                 Utils.getBufferSize(props), key, iv, streamOffset);
     }
 
@@ -319,7 +320,8 @@ public class PositionedCryptoInputStream extends CTRCryptoInputStream {
         if (state == null) {
             CryptoCipher cipher;
             try {
-                cipher = CryptoCipherFactory.getInstance("AES/CTR/NoPadding", props);
+                cipher = CryptoCipherFactory.getInstance(getCipher()
+                        .getTransformation(), props);
             } catch (GeneralSecurityException e) {
                 throw new IOException(e);
             }
diff --git a/src/main/java/org/apache/commons/crypto/utils/Utils.java b/src/main/java/org/apache/commons/crypto/utils/Utils.java
index fc1896d..83a785f 100644
--- a/src/main/java/org/apache/commons/crypto/utils/Utils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/Utils.java
@@ -27,6 +27,7 @@ import java.util.Enumeration;
 import java.util.List;
 import java.util.Properties;
 
+import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.cipher.CryptoCipher;
 import org.apache.commons.crypto.cipher.CryptoCipherFactory;
 import org.apache.commons.crypto.conf.ConfigurationKeys;
@@ -44,7 +45,8 @@ public final class Utils {
      * @see <a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">
      *      http://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a>
      */
-    private static final int AES_BLOCK_SIZE = 16;
+    private static final int AES_BLOCK_SIZE = CipherTransformation.AES_CTR_NOPADDING
+            .getAlgorithmBlockSize();
 
     /**
      * The private constructor of {@Link Utils}.
@@ -191,7 +193,7 @@ public final class Utils {
      */
     public static void checkStreamCipher(CryptoCipher cipher)
             throws IOException {
-        if (!cipher.getAlgorithm().equals("AES/CTR/NoPadding")) {
+        if (cipher.getTransformation() != CipherTransformation.AES_CTR_NOPADDING) {
             throw new IOException("AES/CTR/NoPadding is required");
         }
     }
@@ -207,7 +209,7 @@ public final class Utils {
         checkArgument(bufferSize >= MIN_BUFFER_SIZE,
                 "Minimum value of buffer size is " + MIN_BUFFER_SIZE + ".");
         return bufferSize - bufferSize
-                % cipher.getBlockSize();
+                % cipher.getTransformation().getAlgorithmBlockSize();
     }
 
     /**
@@ -257,15 +259,12 @@ public final class Utils {
      *
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
-     * @param transformation the name of the transformation, e.g.,
-     * <i>AES/CBC/PKCS5Padding</i>.
-     * See the Java Cryptography Architecture Standard Algorithm Name Documentation
-     * for information about standard transformation names.
+     * @param transformation the CipherTransformation instance.
      * @return the CryptoCipher instance.
      * @throws IOException if an I/O error occurs.
      */
     public static CryptoCipher getCipherInstance(
-            String transformation, Properties props)
+            CipherTransformation transformation, Properties props)
             throws IOException {
         try {
             return CryptoCipherFactory.getInstance(transformation, props);
