diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java b/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java
index 12c0d9d..e7c061a 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java
@@ -36,12 +36,12 @@ import org.apache.commons.crypto.utils.Utils;
  */
 final class OpenSsl {
 
+    OpenSslFeedbackCipher opensslBlockCipher;
+
     // Mode constant defined by OpenSsl JNI
     public static final int ENCRYPT_MODE = 1;
     public static final int DECRYPT_MODE = 0;
 
-    private final OpenSslFeedbackCipher opensslBlockCipher;
-
     /** Currently only support AES/CTR/NoPadding. */
     private static enum AlgorithmMode {
         AES_CTR, AES_CBC, AES_GCM;
@@ -99,7 +99,7 @@ final class OpenSsl {
         } catch (Exception t) {
             loadingFailure = t;
         } catch (UnsatisfiedLinkError t) {
-            loadingFailure = t;
+            loadingFailure = t;            
         } finally {
             loadingFailureReason = loadingFailure;
         }
@@ -217,6 +217,7 @@ final class OpenSsl {
      */
     public void init(int mode, byte[] key, AlgorithmParameterSpec params)
             throws InvalidAlgorithmParameterException {
+        checkState();
         opensslBlockCipher.init(mode, key, params);
     }
 
@@ -250,6 +251,7 @@ final class OpenSsl {
      */
     public int update(ByteBuffer input, ByteBuffer output)
             throws ShortBufferException {
+        checkState();
         Utils.checkArgument(input.isDirect() && output.isDirect(),
                 "Direct buffers are required.");
         return opensslBlockCipher.update(input, output);
@@ -270,6 +272,7 @@ final class OpenSsl {
      */
     public int update(byte[] input, int inputOffset, int inputLen,
             byte[] output, int outputOffset) throws ShortBufferException {
+        checkState();
         return opensslBlockCipher.update(input, inputOffset, inputLen, output, outputOffset);
     }
 
@@ -298,6 +301,8 @@ final class OpenSsl {
                        byte[] output, int outputOffset)
             throws ShortBufferException, IllegalBlockSizeException,
             BadPaddingException{
+
+        checkState();
         return opensslBlockCipher.doFinal(input, inputOffset, inputLen, output, outputOffset);
     }
 
@@ -343,6 +348,7 @@ final class OpenSsl {
      */
     public int doFinal(ByteBuffer input, ByteBuffer output) throws ShortBufferException,
             IllegalBlockSizeException, BadPaddingException {
+        checkState();
         Utils.checkArgument(output.isDirect(), "Direct buffer is required.");
 
         return opensslBlockCipher.doFinal(input, output);
@@ -374,6 +380,11 @@ final class OpenSsl {
         }
     }
 
+    /** Checks whether context is initialized. */
+    private void checkState() {
+        Utils.checkState(opensslBlockCipher != null);
+    }
+
     @Override
     protected void finalize() throws Throwable {
         clean();
diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpenSslFeedbackCipher.java b/src/main/java/org/apache/commons/crypto/cipher/OpenSslFeedbackCipher.java
index 67f8058..4fa2743 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpenSslFeedbackCipher.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpenSslFeedbackCipher.java
@@ -32,8 +32,8 @@ import java.security.spec.AlgorithmParameterSpec;
 abstract class OpenSslFeedbackCipher {
 
     protected long context = 0;
-    protected final int algorithmMode;
-    protected final int padding;
+    protected int algorithmMode;
+    protected int padding;
 
     protected int cipherMode = OpenSsl.DECRYPT_MODE;
 
@@ -68,6 +68,6 @@ abstract class OpenSslFeedbackCipher {
     }
 
     public void checkState() {
-        Utils.checkState(context != 0, "Cipher context is invalid.");
+        Utils.checkState(context != 0);
     }
 }
diff --git a/src/main/java/org/apache/commons/crypto/utils/Utils.java b/src/main/java/org/apache/commons/crypto/utils/Utils.java
index 0bef9ba..1c96b44 100644
--- a/src/main/java/org/apache/commons/crypto/utils/Utils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/Utils.java
@@ -89,13 +89,13 @@ public final class Utils {
 
     /**
      * Gets a properties instance that defaults to the System Properties
-     * plus any other properties found in the file
+     * plus any other properties found in the file 
      * {@link #SYSTEM_PROPERTIES_FILE}
      * @return a Properties instance with defaults
      */
     public static Properties getDefaultProperties() {
         return new Properties(DefaultPropertiesHolder.DEFAULT_PROPERTIES);
-    }
+     }
 
     /**
      * Gets the properties merged with default properties.
@@ -183,20 +183,8 @@ public final class Utils {
      * @throws IllegalStateException if expression is false.
      */
     public static void checkState(boolean expression) {
-        checkState(expression, null);
-    }
-
-    /**
-     * Ensures the truth of an expression involving the state of the calling
-     * instance, but not involving any parameters to the calling method.
-     *
-     * @param expression a boolean expression.
-     * @param message Error message for the exception when the expression is false.
-     * @throws IllegalStateException if expression is false.
-     */
-    public static void checkState(boolean expression, String message) {
         if (!expression) {
-            throw new IllegalStateException(message);
+            throw new IllegalStateException();
         }
     }
 
