diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java b/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java
index 231c3bc..6c72ea5 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java
@@ -92,7 +92,7 @@ final class OpenSsl {
         String loadingFailure = null;
         try {
             if (Crypto.isNativeCodeLoaded()) {
-                OpenSslNative.initIDs();
+                OpensslNative.initIDs();
             }
         } catch (Exception t) {
             loadingFailure = t.getMessage();
@@ -142,7 +142,7 @@ final class OpenSsl {
         int algorithmMode = AlgorithmMode.get(transform.algorithm,
                 transform.mode);
         int padding = Padding.get(transform.padding);
-        long context = OpenSslNative.initContext(algorithmMode, padding);
+        long context = OpensslNative.initContext(algorithmMode, padding);
         return new OpenSsl(context, algorithmMode, padding);
     }
 
@@ -205,7 +205,7 @@ final class OpenSsl {
      * @param iv crypto iv
      */
     public void init(int mode, byte[] key, byte[] iv) {
-        context = OpenSslNative
+        context = OpensslNative
                 .init(context, mode, algorithm, padding, key, iv);
     }
 
@@ -242,7 +242,7 @@ final class OpenSsl {
         checkState();
         Utils.checkArgument(input.isDirect() && output.isDirect(),
                 "Direct buffers are required.");
-        int len = OpenSslNative.update(context, input, input.position(),
+        int len = OpensslNative.update(context, input, input.position(),
                 input.remaining(), output, output.position(),
                 output.remaining());
         input.position(input.limit());
@@ -266,7 +266,7 @@ final class OpenSsl {
     public int update(byte[] input, int inputOffset, int inputLen,
             byte[] output, int outputOffset) throws ShortBufferException {
         checkState();
-        return OpenSslNative.updateByteArray(context, input, inputOffset,
+        return OpensslNative.updateByteArray(context, input, inputOffset,
                 inputLen, output, outputOffset, output.length - outputOffset);
     }
 
@@ -313,7 +313,7 @@ final class OpenSsl {
             IllegalBlockSizeException, BadPaddingException {
         checkState();
         Utils.checkArgument(output.isDirect(), "Direct buffer is required.");
-        int len = OpenSslNative.doFinal(context, output, output.position(),
+        int len = OpensslNative.doFinal(context, output, output.position(),
                 output.remaining());
         output.position(output.position() + len);
         return len;
@@ -341,14 +341,14 @@ final class OpenSsl {
             throws ShortBufferException, IllegalBlockSizeException,
             BadPaddingException {
         checkState();
-        return OpenSslNative.doFinalByteArray(context, output, outputOffset,
+        return OpensslNative.doFinalByteArray(context, output, outputOffset,
                 output.length - outputOffset);
     }
 
     /** Forcibly clean the context. */
     public void clean() {
         if (context != 0) {
-            OpenSslNative.clean(context);
+            OpensslNative.clean(context);
             context = 0;
         }
     }
diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpenSslNative.java b/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
similarity index 96%
rename from src/main/java/org/apache/commons/crypto/cipher/OpenSslNative.java
rename to src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
index c73be17..9bac6dd 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpenSslNative.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
@@ -21,14 +21,14 @@ import java.nio.ByteBuffer;
 
 /**
  * JNI interface of {@link OpenSsl} implementation. The native method in this
- * class is defined in OpenSslNative.h (generated by javah).
+ * class is defined in OpensslNative.h (generated by javah).
  */
-class OpenSslNative {
+class OpensslNative {
 
   /**
-   * The private constructor of {@link OpenSslNative}.
+   * The private constructor of {@link OpensslNative}.
    */
-    private OpenSslNative() {
+    private OpensslNative() {
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCipher.java b/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCipher.java
index 7b0b978..adef3cf 100644
--- a/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCipher.java
+++ b/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCipher.java
@@ -71,7 +71,7 @@ class OpenSslJnaCipher implements CryptoCipher {
         }
 
         padding = Padding.get(transform.padding);
-        context = OpenSslNativeJna.EVP_CIPHER_CTX_new();
+        context = OpensslNativeJna.EVP_CIPHER_CTX_new();
 
     }
 
@@ -89,9 +89,9 @@ class OpenSslJnaCipher implements CryptoCipher {
             throws InvalidKeyException, InvalidAlgorithmParameterException {
         Utils.checkNotNull(key);
         Utils.checkNotNull(params);
-        int cipherMode = OpenSslNativeJna.OOSL_JNA_DECRYPT_MODE;
+        int cipherMode = OpensslNativeJna.OOSL_JNA_DECRYPT_MODE;
         if (mode == Cipher.ENCRYPT_MODE) {
-            cipherMode = OpenSslNativeJna.OOSL_JNA_ENCRYPT_MODE;
+            cipherMode = OpensslNativeJna.OOSL_JNA_ENCRYPT_MODE;
         }
         byte[] iv;
         if (params instanceof IvParameterSpec) {
@@ -104,24 +104,24 @@ class OpenSslJnaCipher implements CryptoCipher {
         
        if(algMode == AlgorithmMode.AES_CBC) {
             switch(key.getEncoded().length) {
-                case 16: algo = OpenSslNativeJna.EVP_aes_128_cbc(); break;
-                case 24: algo = OpenSslNativeJna.EVP_aes_192_cbc(); break;
-                case 32: algo = OpenSslNativeJna.EVP_aes_256_cbc(); break;
+                case 16: algo = OpensslNativeJna.EVP_aes_128_cbc(); break;
+                case 24: algo = OpensslNativeJna.EVP_aes_192_cbc(); break;
+                case 32: algo = OpensslNativeJna.EVP_aes_256_cbc(); break;
                 default: throw new InvalidKeyException("keysize unsupported ("+key.getEncoded().length+")");
             }
 
         } else {
             switch(key.getEncoded().length) {
-                case 16: algo = OpenSslNativeJna.EVP_aes_128_ctr(); break;
-                case 24: algo = OpenSslNativeJna.EVP_aes_192_ctr(); break;
-                case 32: algo = OpenSslNativeJna.EVP_aes_256_ctr(); break;
+                case 16: algo = OpensslNativeJna.EVP_aes_128_ctr(); break;
+                case 24: algo = OpensslNativeJna.EVP_aes_192_ctr(); break;
+                case 32: algo = OpensslNativeJna.EVP_aes_256_ctr(); break;
                 default: throw new InvalidKeyException("keysize unsupported ("+key.getEncoded().length+")");
             }
         }
         
-        int retVal = OpenSslNativeJna.EVP_CipherInit_ex(context, algo, null, key.getEncoded(), iv, cipherMode);
+        int retVal = OpensslNativeJna.EVP_CipherInit_ex(context, algo, null, key.getEncoded(), iv, cipherMode);
         throwOnError(retVal);
-        OpenSslNativeJna.EVP_CIPHER_CTX_set_padding(context, padding);
+        OpensslNativeJna.EVP_CIPHER_CTX_set_padding(context, padding);
     }
 
     /**
@@ -138,7 +138,7 @@ class OpenSslJnaCipher implements CryptoCipher {
     public int update(ByteBuffer inBuffer, ByteBuffer outBuffer)
             throws ShortBufferException {
         int[] outlen = new int[1];
-        int retVal = OpenSslNativeJna.EVP_CipherUpdate(context, outBuffer, outlen, inBuffer, inBuffer.remaining());
+        int retVal = OpensslNativeJna.EVP_CipherUpdate(context, outBuffer, outlen, inBuffer, inBuffer.remaining());
         throwOnError(retVal);
         int len = outlen[0];
         inBuffer.position(inBuffer.limit());
@@ -191,7 +191,7 @@ class OpenSslJnaCipher implements CryptoCipher {
             BadPaddingException {
         int uptLen = update(inBuffer, outBuffer);
         int[] outlen = new int[1];
-        int retVal = OpenSslNativeJna.EVP_CipherFinal_ex(context, outBuffer, outlen);
+        int retVal = OpensslNativeJna.EVP_CipherFinal_ex(context, outBuffer, outlen);
         throwOnError(retVal);
         int len = uptLen + outlen[0];
         outBuffer.position(outBuffer.position() + outlen[0]);
@@ -234,18 +234,18 @@ class OpenSslJnaCipher implements CryptoCipher {
     @Override
     public void close() {
         if(context != null) {
-            OpenSslNativeJna.EVP_CIPHER_CTX_cleanup(context);
-            OpenSslNativeJna.EVP_CIPHER_CTX_free(context);
+            OpensslNativeJna.EVP_CIPHER_CTX_cleanup(context);
+            OpensslNativeJna.EVP_CIPHER_CTX_free(context);
         }
     }
     
     private void throwOnError(int retVal) {  
         if(retVal != 1) {
-            NativeLong err = OpenSslNativeJna.ERR_peek_error();
-            String errdesc = OpenSslNativeJna.ERR_error_string(err, null);
+            NativeLong err = OpensslNativeJna.ERR_peek_error();
+            String errdesc = OpensslNativeJna.ERR_error_string(err, null);
             
             if(context != null) {
-                OpenSslNativeJna.EVP_CIPHER_CTX_cleanup(context);
+                OpensslNativeJna.EVP_CIPHER_CTX_cleanup(context);
             }
             throw new RuntimeException("return code "+retVal+" from openssl. Err code is "+err+": "+errdesc);
         }
diff --git a/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandom.java b/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandom.java
index 7ab0b48..1f4e971 100644
--- a/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandom.java
@@ -62,14 +62,14 @@ class OpenSslJnaCryptoRandom extends Random implements CryptoRandom {
 
         boolean rdrandLoaded = false;
         try {
-            OpenSslNativeJna.ENGINE_load_rdrand();
-            rdrandEngine = OpenSslNativeJna.ENGINE_by_id("rdrand");
+            OpensslNativeJna.ENGINE_load_rdrand();
+            rdrandEngine = OpensslNativeJna.ENGINE_by_id("rdrand");
             int ENGINE_METHOD_RAND = 0x0008;
             if(rdrandEngine != null) {
-                int rc = OpenSslNativeJna.ENGINE_init(rdrandEngine);
+                int rc = OpensslNativeJna.ENGINE_init(rdrandEngine);
                 
                 if(rc != 0) {
-                    int rc2 = OpenSslNativeJna.ENGINE_set_default(rdrandEngine, ENGINE_METHOD_RAND);
+                    int rc2 = OpensslNativeJna.ENGINE_set_default(rdrandEngine, ENGINE_METHOD_RAND);
                     if(rc2 != 0) {
                         rdrandLoaded = true;
                     }
@@ -99,13 +99,13 @@ class OpenSslJnaCryptoRandom extends Random implements CryptoRandom {
             //this method is synchronized for now
             //to support multithreading https://wiki.openssl.org/index.php/Manual:Threads(3) needs to be done
             
-            if(rdrandEnabled && OpenSslNativeJna.RAND_get_rand_method().equals(OpenSslNativeJna.RAND_SSLeay())) {
+            if(rdrandEnabled && OpensslNativeJna.RAND_get_rand_method().equals(OpensslNativeJna.RAND_SSLeay())) {
                 close();
                 throw new RuntimeException("rdrand should be used but default is detected");
             }
             
             ByteBuffer buf = ByteBuffer.allocateDirect(bytes.length);
-            int retVal = OpenSslNativeJna.RAND_bytes(buf, bytes.length);
+            int retVal = OpensslNativeJna.RAND_bytes(buf, bytes.length);
             throwOnError(retVal);
             buf.rewind();
             buf.get(bytes,0, bytes.length);
@@ -155,18 +155,18 @@ class OpenSslJnaCryptoRandom extends Random implements CryptoRandom {
     @Override
     public void close() {
         closeRdrandEngine();
-        OpenSslNativeJna.ENGINE_cleanup();
+        OpensslNativeJna.ENGINE_cleanup();
         
         //cleanup locks
-        //OpenSslNativeJna.CRYPTO_set_locking_callback(null);
+        //OpensslNativeJna.CRYPTO_set_locking_callback(null);
         //LOCK.unlock();
     }
     
     private void closeRdrandEngine() {
         
         if(rdrandEngine != null) {
-            OpenSslNativeJna.ENGINE_finish(rdrandEngine);
-            OpenSslNativeJna.ENGINE_free(rdrandEngine);
+            OpensslNativeJna.ENGINE_finish(rdrandEngine);
+            OpensslNativeJna.ENGINE_free(rdrandEngine);
         }
     }
 
@@ -181,8 +181,8 @@ class OpenSslJnaCryptoRandom extends Random implements CryptoRandom {
     
     private void throwOnError(int retVal) {  
         if(retVal != 1) {
-            NativeLong err = OpenSslNativeJna.ERR_peek_error();
-            String errdesc = OpenSslNativeJna.ERR_error_string(err, null);
+            NativeLong err = OpensslNativeJna.ERR_peek_error();
+            String errdesc = OpensslNativeJna.ERR_error_string(err, null);
             close();
             throw new RuntimeException("return code "+retVal+" from openssl. Err code is "+err+": "+errdesc);
         }
diff --git a/src/main/java/org/apache/commons/crypto/jna/OpenSslJna.java b/src/main/java/org/apache/commons/crypto/jna/OpensslJna.java
similarity index 97%
rename from src/main/java/org/apache/commons/crypto/jna/OpenSslJna.java
rename to src/main/java/org/apache/commons/crypto/jna/OpensslJna.java
index cfdff2e..2d255ab 100644
--- a/src/main/java/org/apache/commons/crypto/jna/OpenSslJna.java
+++ b/src/main/java/org/apache/commons/crypto/jna/OpensslJna.java
@@ -23,7 +23,7 @@ import org.apache.commons.crypto.random.CryptoRandom;
 /**
  * Public class to give access to the package protected class objects
  */
-public final class OpenSslJna {
+public final class OpensslJna {
 
     public static Class<? extends CryptoCipher> getCipherClass() {
         return OpenSslJnaCipher.class;
diff --git a/src/main/java/org/apache/commons/crypto/jna/OpensslNativeJna.java b/src/main/java/org/apache/commons/crypto/jna/OpensslNativeJna.java
index 6adddb2..5ffa25b 100644
--- a/src/main/java/org/apache/commons/crypto/jna/OpensslNativeJna.java
+++ b/src/main/java/org/apache/commons/crypto/jna/OpensslNativeJna.java
@@ -24,7 +24,7 @@ import com.sun.jna.Native;
 import com.sun.jna.NativeLong;
 import com.sun.jna.ptr.PointerByReference;
 
-class OpenSslNativeJna {
+class OpensslNativeJna {
 
     static final int OPENSSL_INIT_ENGINE_RDRAND = 0x00000200;
 
diff --git a/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java
index b02139e..15a85ab 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java
@@ -52,7 +52,7 @@ class OpenSslCryptoRandom extends Random implements CryptoRandom {
         boolean opensslLoaded = false;
         if (Crypto.isNativeCodeLoaded()) {
             try {
-                OpenSslCryptoRandomNative.initSR();
+                OpensslCryptoRandomNative.initSR();
                 opensslLoaded = true;
             } catch (Exception t) {// NOPMD
             }
@@ -82,7 +82,7 @@ class OpenSslCryptoRandom extends Random implements CryptoRandom {
     public OpenSslCryptoRandom(Properties props)
             throws NoSuchAlgorithmException {
         //fallback needs to be initialized here in any case cause even if
-        //nativeEnabled is true OpenSslCryptoRandomNative.nextRandBytes may fail
+        //nativeEnabled is true OpensslCryptoRandomNative.nextRandBytes may fail
         fallback = new JavaCryptoRandom(props);
     }
 
@@ -93,7 +93,7 @@ class OpenSslCryptoRandom extends Random implements CryptoRandom {
      */
     @Override
     public void nextBytes(byte[] bytes) {
-        if (!nativeEnabled || !OpenSslCryptoRandomNative.nextRandBytes(bytes)) {
+        if (!nativeEnabled || !OpensslCryptoRandomNative.nextRandBytes(bytes)) {
             fallback.nextBytes(bytes);
         }
     }
diff --git a/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.java b/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
similarity index 78%
rename from src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.java
rename to src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
index 84b92a6..8c305e0 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
@@ -20,15 +20,15 @@ package org.apache.commons.crypto.random;
 /**
  * JNI interface of {@link CryptoRandom} implementation for OpenSSL.
  * The native method in this class is defined in 
- * OpenSslCryptoRandomNative.h (generated at build time by javah)
+ * OpensslCryptoRandomNative.h (generated at build time by javah)
  * and implemented in the file
- * src/main/native/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.c
+ * src/main/native/org/apache/commons/crypto/random/OpensslCryptoRandomNative.c
  */
-class OpenSslCryptoRandomNative {
+class OpensslCryptoRandomNative {
     /**
-     * The private constructor of {@link OpenSslCryptoRandomNative}.
+     * The private constructor of {@link OpensslCryptoRandomNative}.
      */
-    private OpenSslCryptoRandomNative() {
+    private OpensslCryptoRandomNative() {
     }
 
     /**
@@ -37,11 +37,11 @@ class OpenSslCryptoRandomNative {
     public native static void initSR();
 
     /**
-     * Judges whether use {@link OpenSslCryptoRandomNative} to generate the
+     * Judges whether use {@link OpensslCryptoRandomNative} to generate the
      * user-specified number of random bits.
      *
      * @param bytes the array to be filled in with random bytes.
-     * @return true if use {@link OpenSslCryptoRandomNative} to generate the
+     * @return true if use {@link OpensslCryptoRandomNative} to generate the
      *         user-specified number of random bits.
      */
     public native static boolean nextRandBytes(byte[] bytes);
